
(function(r,f) {
	var a=f();
	if(typeof a!=='object')return;
	var e=[typeof module==='object'&&typeof module.exports==='object'?module.exports:null,typeof window!=='undefined'?window:null,r&&r!==window?r:null];
	for(var i in a){e[0]&&(e[0][i]=a[i]);e[1]&&i!=='__esModule'&&(e[1][i] = a[i]);e[2]&&(e[2][i]=a[i]);}
})(this,function(){
	return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./libs/bootstrap-table/bootstrap-table.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./libs/bootstrap-table/bootstrap-table.js":
/*!*************************************************!*\
  !*** ./libs/bootstrap-table/bootstrap-table.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! ../../node_modules/bootstrap-table/src/bootstrap-table.js */ \"./node_modules/bootstrap-table/src/bootstrap-table.js\");\n\n//# sourceURL=webpack:///./libs/bootstrap-table/bootstrap-table.js?");

/***/ }),

/***/ "./node_modules/bootstrap-table/src/bootstrap-table.js":
/*!*************************************************************!*\
  !*** ./node_modules/bootstrap-table/src/bootstrap-table.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * @author zhixin wen <wenzhixin2010@gmail.com>\n * version: 1.14.2\n * https://github.com/wenzhixin/bootstrap-table/\n */\n(function ($) {\n  // TOOLS DEFINITION\n  // ======================\n  var bootstrapVersion = 4;\n\n  try {\n    var rawVersion = $.fn.dropdown.Constructor.VERSION; // Only try to parse VERSION if is is defined.\n    // It is undefined in older versions of Bootstrap (tested with 3.1.1).\n\n    if (rawVersion !== undefined) {\n      bootstrapVersion = parseInt(rawVersion, 10);\n    }\n  } catch (e) {// ignore\n  }\n\n  var constants = {\n    3: {\n      theme: 'bootstrap3',\n      iconsPrefix: 'glyphicon',\n      icons: {\n        paginationSwitchDown: 'glyphicon-collapse-down icon-chevron-down',\n        paginationSwitchUp: 'glyphicon-collapse-up icon-chevron-up',\n        refresh: 'glyphicon-refresh icon-refresh',\n        toggleOff: 'glyphicon-list-alt icon-list-alt',\n        toggleOn: 'glyphicon-list-alt icon-list-alt',\n        columns: 'glyphicon-th icon-th',\n        detailOpen: 'glyphicon-plus icon-plus',\n        detailClose: 'glyphicon-minus icon-minus',\n        fullscreen: 'glyphicon-fullscreen'\n      },\n      classes: {\n        buttonsPrefix: 'btn',\n        buttons: 'default',\n        buttonsGroup: 'btn-group',\n        buttonsDropdown: 'btn-group',\n        pull: 'pull',\n        inputGroup: '',\n        input: 'form-control',\n        paginationDropdown: 'btn-group dropdown',\n        dropup: 'dropup',\n        dropdownActive: 'active',\n        paginationActive: 'active'\n      },\n      html: {\n        toobarDropdow: ['<ul class=\"dropdown-menu\" role=\"menu\">', '</ul>'],\n        toobarDropdowItem: '<li role=\"menuitem\"><label>%s</label></li>',\n        pageDropdown: ['<ul class=\"dropdown-menu\" role=\"menu\">', '</ul>'],\n        pageDropdownItem: '<li role=\"menuitem\" class=\"%s\"><a href=\"#\">%s</a></li>',\n        dropdownCaret: '<span class=\"caret\"></span>',\n        pagination: ['<ul class=\"pagination%s\">', '</ul>'],\n        paginationItem: '<li class=\"page-item%s\"><a class=\"page-link\" href=\"#\">%s</a></li>',\n        icon: '<i class=\"%s %s\"></i>'\n      }\n    },\n    4: {\n      theme: 'bootstrap4',\n      iconsPrefix: 'fa',\n      icons: {\n        paginationSwitchDown: 'fa-caret-square-down',\n        paginationSwitchUp: 'fa-caret-square-up',\n        refresh: 'fa-sync',\n        toggleOff: 'fa-toggle-off',\n        toggleOn: 'fa-toggle-on',\n        columns: 'fa-th-list',\n        fullscreen: 'fa-arrows-alt',\n        detailOpen: 'fa-plus',\n        detailClose: 'fa-minus'\n      },\n      classes: {\n        buttonsPrefix: 'btn',\n        buttons: 'secondary',\n        buttonsGroup: 'btn-group',\n        buttonsDropdown: 'btn-group',\n        pull: 'float',\n        inputGroup: '',\n        input: 'form-control',\n        paginationDropdown: 'btn-group dropdown',\n        dropup: 'dropup',\n        dropdownActive: 'active',\n        paginationActive: 'active'\n      },\n      html: {\n        toobarDropdow: ['<div class=\"dropdown-menu dropdown-menu-right\">', '</div>'],\n        toobarDropdowItem: '<label class=\"dropdown-item\">%s</label>',\n        pageDropdown: ['<div class=\"dropdown-menu\">', '</div>'],\n        pageDropdownItem: '<a class=\"dropdown-item %s\" href=\"#\">%s</a>',\n        dropdownCaret: '<span class=\"caret\"></span>',\n        pagination: ['<ul class=\"pagination%s\">', '</ul>'],\n        paginationItem: '<li class=\"page-item%s\"><a class=\"page-link\" href=\"#\">%s</a></li>',\n        icon: '<i class=\"%s %s\"></i>'\n      }\n    }\n  }[bootstrapVersion];\n  var Utils = {\n    bootstrapVersion: bootstrapVersion,\n    // it only does '%s', and return '' when arguments are undefined\n    sprintf: function sprintf(_str) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var flag = true;\n      var i = 0;\n\n      var str = _str.replace(/%s/g, function () {\n        var arg = args[i++];\n\n        if (typeof arg === 'undefined') {\n          flag = false;\n          return '';\n        }\n\n        return arg;\n      });\n\n      return flag ? str : '';\n    },\n    isEmptyObject: function isEmptyObject() {\n      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return Object.entries(obj).length === 0 && obj.constructor === Object;\n    },\n    isNumeric: function isNumeric(n) {\n      return !isNaN(parseFloat(n)) && isFinite(n);\n    },\n    getFieldTitle: function getFieldTitle(list, value) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n\n          if (item.field === value) {\n            return item.title;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return '';\n    },\n    setFieldIndex: function setFieldIndex(columns) {\n      var totalCol = 0;\n      var flag = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = columns[0][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var column = _step2.value;\n          totalCol += column.colspan || 1;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      for (var i = 0; i < columns.length; i++) {\n        flag[i] = [];\n\n        for (var j = 0; j < totalCol; j++) {\n          flag[i][j] = false;\n        }\n      }\n\n      for (var _i = 0; _i < columns.length; _i++) {\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = columns[_i][Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var r = _step3.value;\n            var rowspan = r.rowspan || 1;\n            var colspan = r.colspan || 1;\n\n            var index = flag[_i].indexOf(false);\n\n            if (colspan === 1) {\n              r.fieldIndex = index; // when field is undefined, use index instead\n\n              if (typeof r.field === 'undefined') {\n                r.field = index;\n              }\n            }\n\n            for (var k = 0; k < rowspan; k++) {\n              flag[_i + k][index] = true;\n            }\n\n            for (var _k = 0; _k < colspan; _k++) {\n              flag[_i][index + _k] = true;\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n      }\n    },\n    getScrollBarWidth: function getScrollBarWidth() {\n      if (this.cachedWidth === undefined) {\n        var $inner = $('<div/>').addClass('fixed-table-scroll-inner');\n        var $outer = $('<div/>').addClass('fixed-table-scroll-outer');\n        $outer.append($inner);\n        $('body').append($outer);\n        var w1 = $inner[0].offsetWidth;\n        $outer.css('overflow', 'scroll');\n        var w2 = $inner[0].offsetWidth;\n\n        if (w1 === w2) {\n          w2 = $outer[0].clientWidth;\n        }\n\n        $outer.remove();\n        this.cachedWidth = w1 - w2;\n      }\n\n      return this.cachedWidth;\n    },\n    calculateObjectValue: function calculateObjectValue(self, name, args, defaultValue) {\n      var func = name;\n\n      if (typeof name === 'string') {\n        // support obj.func1.func2\n        var names = name.split('.');\n\n        if (names.length > 1) {\n          func = window;\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = names[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var f = _step4.value;\n              func = func[f];\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n        } else {\n          func = window[name];\n        }\n      }\n\n      if (func !== null && _typeof(func) === 'object') {\n        return func;\n      }\n\n      if (typeof func === 'function') {\n        return func.apply(self, args || []);\n      }\n\n      if (!func && typeof name === 'string' && this.sprintf.apply(this, [name].concat(_toConsumableArray(args)))) {\n        return this.sprintf.apply(this, [name].concat(_toConsumableArray(args)));\n      }\n\n      return defaultValue;\n    },\n    compareObjects: function compareObjects(objectA, objectB, compareLength) {\n      var aKeys = Object.keys(objectA);\n      var bKeys = Object.keys(objectB);\n\n      if (compareLength && aKeys.length !== bKeys.length) {\n        return false;\n      }\n\n      for (var _i2 = 0, _aKeys = aKeys; _i2 < _aKeys.length; _i2++) {\n        var key = _aKeys[_i2];\n\n        if (bKeys.includes(key) && objectA[key] !== objectB[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    escapeHTML: function escapeHTML(text) {\n      if (typeof text === 'string') {\n        return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#039;').replace(/`/g, '&#x60;');\n      }\n\n      return text;\n    },\n    getRealDataAttr: function getRealDataAttr(dataAttr) {\n      for (var _i3 = 0, _Object$entries = Object.entries(dataAttr); _i3 < _Object$entries.length; _i3++) {\n        var _ref3 = _Object$entries[_i3];\n\n        var _ref2 = _slicedToArray(_ref3, 2);\n\n        var attr = _ref2[0];\n        var value = _ref2[1];\n        var auxAttr = attr.split(/(?=[A-Z])/).join('-').toLowerCase();\n\n        if (auxAttr !== attr) {\n          dataAttr[auxAttr] = value;\n          delete dataAttr[attr];\n        }\n      }\n\n      return dataAttr;\n    },\n    getItemField: function getItemField(item, field, escape) {\n      var value = item;\n\n      if (typeof field !== 'string' || item.hasOwnProperty(field)) {\n        return escape ? this.escapeHTML(item[field]) : item[field];\n      }\n\n      var props = field.split('.');\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = props[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var p = _step5.value;\n          value = value && value[p];\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      return escape ? this.escapeHTML(value) : value;\n    },\n    isIEBrowser: function isIEBrowser() {\n      return navigator.userAgent.includes('MSIE ') || /Trident.*rv:11\\./.test(navigator.userAgent);\n    },\n    findIndex: function findIndex(items, item) {\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = items[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var it = _step6.value;\n\n          if (JSON.stringify(it) === JSON.stringify(item)) {\n            return items.indexOf(it);\n          }\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      return -1;\n    }\n  }; // BOOTSTRAP TABLE CLASS DEFINITION\n  // ======================\n\n  var DEFAULTS = {\n    height: undefined,\n    classes: 'table table-bordered table-hover',\n    theadClasses: '',\n    rowStyle: function rowStyle(row, index) {\n      return {};\n    },\n    rowAttributes: function rowAttributes(row, index) {\n      return {};\n    },\n    undefinedText: '-',\n    locale: undefined,\n    sortable: true,\n    sortClass: undefined,\n    silentSort: true,\n    sortName: undefined,\n    sortOrder: 'asc',\n    sortStable: false,\n    rememberOrder: false,\n    customSort: undefined,\n    columns: [[]],\n    data: [],\n    url: undefined,\n    method: 'get',\n    cache: true,\n    contentType: 'application/json',\n    dataType: 'json',\n    ajax: undefined,\n    ajaxOptions: {},\n    queryParams: function queryParams(params) {\n      return params;\n    },\n    queryParamsType: 'limit',\n    // 'limit', undefined\n    responseHandler: function responseHandler(res) {\n      return res;\n    },\n    totalField: 'total',\n    dataField: 'rows',\n    pagination: false,\n    onlyInfoPagination: false,\n    paginationLoop: true,\n    sidePagination: 'client',\n    // client or server\n    totalRows: 0,\n    pageNumber: 1,\n    pageSize: 10,\n    pageList: [10, 25, 50, 100],\n    paginationHAlign: 'right',\n    // right, left\n    paginationVAlign: 'bottom',\n    // bottom, top, both\n    paginationDetailHAlign: 'left',\n    // right, left\n    paginationPreText: '&lsaquo;',\n    paginationNextText: '&rsaquo;',\n    paginationSuccessivelySize: 5,\n    // Maximum successively number of pages in a row\n    paginationPagesBySide: 1,\n    // Number of pages on each side (right, left) of the current page.\n    paginationUseIntermediate: false,\n    // Calculate intermediate pages for quick access\n    search: false,\n    searchOnEnterKey: false,\n    strictSearch: false,\n    trimOnSearch: true,\n    searchAlign: 'right',\n    searchTimeOut: 500,\n    searchText: '',\n    customSearch: undefined,\n    showHeader: true,\n    showFooter: false,\n    footerStyle: function footerStyle(row, index) {\n      return {};\n    },\n    showColumns: false,\n    minimumCountColumns: 1,\n    showPaginationSwitch: false,\n    showRefresh: false,\n    showToggle: false,\n    showFullscreen: false,\n    smartDisplay: true,\n    escape: false,\n    idField: undefined,\n    selectItemName: 'btSelectItem',\n    clickToSelect: false,\n    ignoreClickToSelectOn: function ignoreClickToSelectOn(_ref4) {\n      var tagName = _ref4.tagName;\n      return ['A', 'BUTTON'].includes(tagName);\n    },\n    singleSelect: false,\n    checkboxHeader: true,\n    maintainSelected: false,\n    uniqueId: undefined,\n    cardView: false,\n    detailView: false,\n    detailFormatter: function detailFormatter(index, row) {\n      return '';\n    },\n    detailFilter: function detailFilter(index, row) {\n      return true;\n    },\n    toolbar: undefined,\n    toolbarAlign: 'left',\n    buttonsToolbar: undefined,\n    buttonsAlign: 'right',\n    buttonsPrefix: constants.classes.buttonsPrefix,\n    buttonsClass: constants.classes.buttons,\n    icons: constants.icons,\n    iconSize: undefined,\n    iconsPrefix: constants.iconsPrefix,\n    // glyphicon or fa(font-awesome)\n    onAll: function onAll(name, args) {\n      return false;\n    },\n    onClickCell: function onClickCell(field, value, row, $element) {\n      return false;\n    },\n    onDblClickCell: function onDblClickCell(field, value, row, $element) {\n      return false;\n    },\n    onClickRow: function onClickRow(item, $element) {\n      return false;\n    },\n    onDblClickRow: function onDblClickRow(item, $element) {\n      return false;\n    },\n    onSort: function onSort(name, order) {\n      return false;\n    },\n    onCheck: function onCheck(row) {\n      return false;\n    },\n    onUncheck: function onUncheck(row) {\n      return false;\n    },\n    onCheckAll: function onCheckAll(rows) {\n      return false;\n    },\n    onUncheckAll: function onUncheckAll(rows) {\n      return false;\n    },\n    onCheckSome: function onCheckSome(rows) {\n      return false;\n    },\n    onUncheckSome: function onUncheckSome(rows) {\n      return false;\n    },\n    onLoadSuccess: function onLoadSuccess(data) {\n      return false;\n    },\n    onLoadError: function onLoadError(status) {\n      return false;\n    },\n    onColumnSwitch: function onColumnSwitch(field, checked) {\n      return false;\n    },\n    onPageChange: function onPageChange(number, size) {\n      return false;\n    },\n    onSearch: function onSearch(text) {\n      return false;\n    },\n    onToggle: function onToggle(cardView) {\n      return false;\n    },\n    onPreBody: function onPreBody(data) {\n      return false;\n    },\n    onPostBody: function onPostBody() {\n      return false;\n    },\n    onPostHeader: function onPostHeader() {\n      return false;\n    },\n    onExpandRow: function onExpandRow(index, row, $detail) {\n      return false;\n    },\n    onCollapseRow: function onCollapseRow(index, row) {\n      return false;\n    },\n    onRefreshOptions: function onRefreshOptions(options) {\n      return false;\n    },\n    onRefresh: function onRefresh(params) {\n      return false;\n    },\n    onResetView: function onResetView() {\n      return false;\n    },\n    onScrollBody: function onScrollBody() {\n      return false;\n    }\n  };\n  var LOCALES = {};\n  LOCALES['en-US'] = LOCALES.en = {\n    formatLoadingMessage: function formatLoadingMessage() {\n      return 'Loading, please wait';\n    },\n    formatRecordsPerPage: function formatRecordsPerPage(pageNumber) {\n      return \"\".concat(pageNumber, \" rows per page\");\n    },\n    formatShowingRows: function formatShowingRows(pageFrom, pageTo, totalRows) {\n      return \"Showing \".concat(pageFrom, \" to \").concat(pageTo, \" of \").concat(totalRows, \" rows\");\n    },\n    formatDetailPagination: function formatDetailPagination(totalRows) {\n      return \"Showing \".concat(totalRows, \" rows\");\n    },\n    formatSearch: function formatSearch() {\n      return 'Search';\n    },\n    formatNoMatches: function formatNoMatches() {\n      return 'No matching records found';\n    },\n    formatPaginationSwitch: function formatPaginationSwitch() {\n      return 'Hide/Show pagination';\n    },\n    formatRefresh: function formatRefresh() {\n      return 'Refresh';\n    },\n    formatToggle: function formatToggle() {\n      return 'Toggle';\n    },\n    formatColumns: function formatColumns() {\n      return 'Columns';\n    },\n    formatFullscreen: function formatFullscreen() {\n      return 'Fullscreen';\n    },\n    formatAllRows: function formatAllRows() {\n      return 'All';\n    }\n  };\n  $.extend(DEFAULTS, LOCALES['en-US']);\n  var COLUMN_DEFAULTS = {\n    radio: false,\n    checkbox: false,\n    checkboxEnabled: true,\n    field: undefined,\n    title: undefined,\n    titleTooltip: undefined,\n    'class': undefined,\n    align: undefined,\n    // left, right, center\n    halign: undefined,\n    // left, right, center\n    falign: undefined,\n    // left, right, center\n    valign: undefined,\n    // top, middle, bottom\n    width: undefined,\n    sortable: false,\n    order: 'asc',\n    // asc, desc\n    visible: true,\n    switchable: true,\n    clickToSelect: true,\n    formatter: undefined,\n    footerFormatter: undefined,\n    events: undefined,\n    sorter: undefined,\n    sortName: undefined,\n    cellStyle: undefined,\n    searchable: true,\n    searchFormatter: true,\n    cardVisible: true,\n    escape: false,\n    showSelectTitle: false\n  };\n  var EVENTS = {\n    'all.bs.table': 'onAll',\n    'click-cell.bs.table': 'onClickCell',\n    'dbl-click-cell.bs.table': 'onDblClickCell',\n    'click-row.bs.table': 'onClickRow',\n    'dbl-click-row.bs.table': 'onDblClickRow',\n    'sort.bs.table': 'onSort',\n    'check.bs.table': 'onCheck',\n    'uncheck.bs.table': 'onUncheck',\n    'check-all.bs.table': 'onCheckAll',\n    'uncheck-all.bs.table': 'onUncheckAll',\n    'check-some.bs.table': 'onCheckSome',\n    'uncheck-some.bs.table': 'onUncheckSome',\n    'load-success.bs.table': 'onLoadSuccess',\n    'load-error.bs.table': 'onLoadError',\n    'column-switch.bs.table': 'onColumnSwitch',\n    'page-change.bs.table': 'onPageChange',\n    'search.bs.table': 'onSearch',\n    'toggle.bs.table': 'onToggle',\n    'pre-body.bs.table': 'onPreBody',\n    'post-body.bs.table': 'onPostBody',\n    'post-header.bs.table': 'onPostHeader',\n    'expand-row.bs.table': 'onExpandRow',\n    'collapse-row.bs.table': 'onCollapseRow',\n    'refresh-options.bs.table': 'onRefreshOptions',\n    'reset-view.bs.table': 'onResetView',\n    'refresh.bs.table': 'onRefresh',\n    'scroll-body.bs.table': 'onScrollBody'\n  };\n\n  var BootstrapTable =\n  /*#__PURE__*/\n  function () {\n    function BootstrapTable(el, options) {\n      _classCallCheck(this, BootstrapTable);\n\n      this.options = options;\n      this.$el = $(el);\n      this.$el_ = this.$el.clone();\n      this.timeoutId_ = 0;\n      this.timeoutFooter_ = 0;\n      this.init();\n    }\n\n    _createClass(BootstrapTable, [{\n      key: \"init\",\n      value: function init() {\n        this.initConstants();\n        this.initLocale();\n        this.initContainer();\n        this.initTable();\n        this.initHeader();\n        this.initData();\n        this.initHiddenRows();\n        this.initFooter();\n        this.initToolbar();\n        this.initPagination();\n        this.initBody();\n        this.initSearchText();\n        this.initServer();\n      }\n    }, {\n      key: \"initConstants\",\n      value: function initConstants() {\n        var o = this.options;\n        this.constants = constants;\n        var buttonsPrefix = o.buttonsPrefix ? o.buttonsPrefix + '-' : '';\n        this.constants.buttonsClass = [o.buttonsPrefix, buttonsPrefix + o.buttonsClass, Utils.sprintf(\"\".concat(buttonsPrefix, \"%s\"), o.iconSize)].join(' ').trim();\n      }\n    }, {\n      key: \"initLocale\",\n      value: function initLocale() {\n        if (this.options.locale) {\n          var locales = $.fn.bootstrapTable.locales;\n          var parts = this.options.locale.split(/-|_/);\n          parts[0] = parts[0].toLowerCase();\n\n          if (parts[1]) {\n            parts[1] = parts[1].toUpperCase();\n          }\n\n          if (locales[this.options.locale]) {\n            $.extend(this.options, locales[this.options.locale]);\n          } else if (locales[parts.join('-')]) {\n            $.extend(this.options, locales[parts.join('-')]);\n          } else if (locales[parts[0]]) {\n            $.extend(this.options, locales[parts[0]]);\n          }\n        }\n      }\n    }, {\n      key: \"initContainer\",\n      value: function initContainer() {\n        var topPagination = ['top', 'both'].includes(this.options.paginationVAlign) ? '<div class=\"fixed-table-pagination clearfix\"></div>' : '';\n        var bottomPagination = ['bottom', 'both'].includes(this.options.paginationVAlign) ? '<div class=\"fixed-table-pagination\"></div>' : '';\n        this.$container = $(\"\\n        <div class=\\\"bootstrap-table\\\">\\n        <div class=\\\"fixed-table-toolbar\\\"></div>\\n        \".concat(topPagination, \"\\n        <div class=\\\"fixed-table-container\\\">\\n        <div class=\\\"fixed-table-header\\\"><table></table></div>\\n        <div class=\\\"fixed-table-body\\\">\\n        <div class=\\\"fixed-table-loading\\\">\\n        <span class=\\\"loading-wrap\\\">\\n        <span class=\\\"loading-text\\\">\").concat(this.options.formatLoadingMessage(), \"</span>\\n        <span class=\\\"animation-wrap\\\"><span class=\\\"animation-dot\\\"></span></span>\\n        </span>\\n        </div>\\n        </div>\\n        <div class=\\\"fixed-table-footer\\\"><table><thead><tr></tr></thead></table></div>\\n        </div>\\n        \").concat(bottomPagination, \"\\n        </div>\\n      \"));\n        this.$container.insertAfter(this.$el);\n        this.$tableContainer = this.$container.find('.fixed-table-container');\n        this.$tableHeader = this.$container.find('.fixed-table-header');\n        this.$tableBody = this.$container.find('.fixed-table-body');\n        this.$tableLoading = this.$container.find('.fixed-table-loading');\n        this.$tableFooter = this.$container.find('.fixed-table-footer'); // checking if custom table-toolbar exists or not\n\n        if (this.options.buttonsToolbar) {\n          this.$toolbar = $('body').find(this.options.buttonsToolbar);\n        } else {\n          this.$toolbar = this.$container.find('.fixed-table-toolbar');\n        }\n\n        this.$pagination = this.$container.find('.fixed-table-pagination');\n        this.$tableBody.append(this.$el);\n        this.$container.after('<div class=\"clearfix\"></div>');\n        this.$el.addClass(this.options.classes);\n        this.$tableLoading.addClass(this.options.classes);\n\n        if (this.options.height) {\n          this.$tableContainer.addClass('fixed-height');\n\n          if (this.options.showFooter) {\n            this.$tableContainer.addClass('has-footer');\n          }\n\n          if (this.options.classes.split(' ').includes('table-bordered')) {\n            this.$tableBody.append('<div class=\"fixed-table-border\"></div>');\n            this.$tableBorder = this.$tableBody.find('.fixed-table-border');\n            this.$tableLoading.addClass('fixed-table-border');\n          }\n        }\n      }\n    }, {\n      key: \"initTable\",\n      value: function initTable() {\n        var _this = this;\n\n        var columns = [];\n        var data = [];\n        this.$header = this.$el.find('>thead');\n\n        if (!this.$header.length) {\n          this.$header = $(\"<thead class=\\\"\".concat(this.options.theadClasses, \"\\\"></thead>\")).appendTo(this.$el);\n        } else if (this.options.theadClasses) {\n          this.$header.addClass(this.options.theadClasses);\n        }\n\n        this.$header.find('tr').each(function (i, el) {\n          var column = [];\n          $(el).find('th').each(function (i, el) {\n            // #2014: getFieldIndex and elsewhere assume this is string, causes issues if not\n            if (typeof $(el).data('field') !== 'undefined') {\n              $(el).data('field', \"\".concat($(el).data('field')));\n            }\n\n            column.push($.extend({}, {\n              title: $(el).html(),\n              'class': $(el).attr('class'),\n              titleTooltip: $(el).attr('title'),\n              rowspan: $(el).attr('rowspan') ? +$(el).attr('rowspan') : undefined,\n              colspan: $(el).attr('colspan') ? +$(el).attr('colspan') : undefined\n            }, $(el).data()));\n          });\n          columns.push(column);\n        });\n\n        if (!Array.isArray(this.options.columns[0])) {\n          this.options.columns = [this.options.columns];\n        }\n\n        this.options.columns = $.extend(true, [], columns, this.options.columns);\n        this.columns = [];\n        this.fieldsColumnsIndex = [];\n        Utils.setFieldIndex(this.options.columns);\n        this.options.columns.forEach(function (columns, i) {\n          columns.forEach(function (_column, j) {\n            var column = $.extend({}, BootstrapTable.COLUMN_DEFAULTS, _column);\n\n            if (typeof column.fieldIndex !== 'undefined') {\n              _this.columns[column.fieldIndex] = column;\n              _this.fieldsColumnsIndex[column.field] = column.fieldIndex;\n            }\n\n            _this.options.columns[i][j] = column;\n          });\n        }); // if options.data is setting, do not process tbody data\n\n        if (this.options.data.length) {\n          return;\n        }\n\n        var m = [];\n        this.$el.find('>tbody>tr').each(function (y, el) {\n          var row = {}; // save tr's id, class and data-* attributes\n\n          row._id = $(el).attr('id');\n          row._class = $(el).attr('class');\n          row._data = Utils.getRealDataAttr($(el).data());\n          $(el).find('>td').each(function (_x, el) {\n            var cspan = +$(el).attr('colspan') || 1;\n            var rspan = +$(el).attr('rowspan') || 1;\n            var x = _x; // skip already occupied cells in current row\n\n            for (; m[y] && m[y][x]; x++) {} // ignore\n            // mark matrix elements occupied by current cell with true\n\n\n            for (var tx = x; tx < x + cspan; tx++) {\n              for (var ty = y; ty < y + rspan; ty++) {\n                if (!m[ty]) {\n                  // fill missing rows\n                  m[ty] = [];\n                }\n\n                m[ty][tx] = true;\n              }\n            }\n\n            var field = _this.columns[x].field;\n            row[field] = $(el).html().trim(); // save td's id, class and data-* attributes\n\n            row[\"_\".concat(field, \"_id\")] = $(el).attr('id');\n            row[\"_\".concat(field, \"_class\")] = $(el).attr('class');\n            row[\"_\".concat(field, \"_rowspan\")] = $(el).attr('rowspan');\n            row[\"_\".concat(field, \"_colspan\")] = $(el).attr('colspan');\n            row[\"_\".concat(field, \"_title\")] = $(el).attr('title');\n            row[\"_\".concat(field, \"_data\")] = Utils.getRealDataAttr($(el).data());\n          });\n          data.push(row);\n        });\n        this.options.data = data;\n\n        if (data.length) {\n          this.fromHtml = true;\n        }\n      }\n    }, {\n      key: \"initHeader\",\n      value: function initHeader() {\n        var _this2 = this;\n\n        var visibleColumns = {};\n        var html = [];\n        this.header = {\n          fields: [],\n          styles: [],\n          classes: [],\n          formatters: [],\n          events: [],\n          sorters: [],\n          sortNames: [],\n          cellStyles: [],\n          searchables: []\n        };\n        this.options.columns.forEach(function (columns, i) {\n          html.push('<tr>');\n\n          if (i === 0 && !_this2.options.cardView && _this2.options.detailView) {\n            html.push(\"<th class=\\\"detail\\\" rowspan=\\\"\".concat(_this2.options.columns.length, \"\\\">\\n            <div class=\\\"fht-cell\\\"></div>\\n            </th>\\n          \"));\n          }\n\n          columns.forEach(function (column, j) {\n            var text = '';\n            var halign = ''; // header align style\n\n            var align = ''; // body align style\n\n            var style = '';\n            var class_ = Utils.sprintf(' class=\"%s\"', column['class']);\n            var unitWidth = 'px';\n            var width = column.width;\n\n            if (column.width !== undefined && !_this2.options.cardView) {\n              if (typeof column.width === 'string') {\n                if (column.width.includes('%')) {\n                  unitWidth = '%';\n                }\n              }\n            }\n\n            if (column.width && typeof column.width === 'string') {\n              width = column.width.replace('%', '').replace('px', '');\n            }\n\n            halign = Utils.sprintf('text-align: %s; ', column.halign ? column.halign : column.align);\n            align = Utils.sprintf('text-align: %s; ', column.align);\n            style = Utils.sprintf('vertical-align: %s; ', column.valign);\n            style += Utils.sprintf('width: %s; ', (column.checkbox || column.radio) && !width ? !column.showSelectTitle ? '36px' : undefined : width ? width + unitWidth : undefined);\n\n            if (typeof column.fieldIndex !== 'undefined') {\n              _this2.header.fields[column.fieldIndex] = column.field;\n              _this2.header.styles[column.fieldIndex] = align + style;\n              _this2.header.classes[column.fieldIndex] = class_;\n              _this2.header.formatters[column.fieldIndex] = column.formatter;\n              _this2.header.events[column.fieldIndex] = column.events;\n              _this2.header.sorters[column.fieldIndex] = column.sorter;\n              _this2.header.sortNames[column.fieldIndex] = column.sortName;\n              _this2.header.cellStyles[column.fieldIndex] = column.cellStyle;\n              _this2.header.searchables[column.fieldIndex] = column.searchable;\n\n              if (!column.visible) {\n                return;\n              }\n\n              if (_this2.options.cardView && !column.cardVisible) {\n                return;\n              }\n\n              visibleColumns[column.field] = column;\n            }\n\n            html.push(\"<th\".concat(Utils.sprintf(' title=\"%s\"', column.titleTooltip)), column.checkbox || column.radio ? Utils.sprintf(' class=\"bs-checkbox %s\"', column['class'] || '') : class_, Utils.sprintf(' style=\"%s\"', halign + style), Utils.sprintf(' rowspan=\"%s\"', column.rowspan), Utils.sprintf(' colspan=\"%s\"', column.colspan), Utils.sprintf(' data-field=\"%s\"', column.field), // If `column` is not the first element of `this.options.columns[0]`, then className 'data-not-first-th' should be added.\n            j === 0 && i > 0 ? ' data-not-first-th' : '', '>');\n            html.push(Utils.sprintf('<div class=\"th-inner %s\">', _this2.options.sortable && column.sortable ? 'sortable both' : ''));\n            text = _this2.options.escape ? Utils.escapeHTML(column.title) : column.title;\n            var title = text;\n\n            if (column.checkbox) {\n              text = '';\n\n              if (!_this2.options.singleSelect && _this2.options.checkboxHeader) {\n                text = '<label><input name=\"btSelectAll\" type=\"checkbox\" /><span></span></label>';\n              }\n\n              _this2.header.stateField = column.field;\n            }\n\n            if (column.radio) {\n              text = '';\n              _this2.header.stateField = column.field;\n              _this2.options.singleSelect = true;\n            }\n\n            if (!text && column.showSelectTitle) {\n              text += title;\n            }\n\n            html.push(text);\n            html.push('</div>');\n            html.push('<div class=\"fht-cell\"></div>');\n            html.push('</div>');\n            html.push('</th>');\n          });\n          html.push('</tr>');\n        });\n        this.$header.html(html.join(''));\n        this.$header.find('th[data-field]').each(function (i, el) {\n          $(el).data(visibleColumns[$(el).data('field')]);\n        });\n        this.$container.off('click', '.th-inner').on('click', '.th-inner', function (e) {\n          var $this = $(e.currentTarget);\n\n          if (_this2.options.detailView && !$this.parent().hasClass('bs-checkbox')) {\n            if ($this.closest('.bootstrap-table')[0] !== _this2.$container[0]) {\n              return false;\n            }\n          }\n\n          if (_this2.options.sortable && $this.parent().data().sortable) {\n            _this2.onSort(e);\n          }\n        });\n        this.$header.children().children().off('keypress').on('keypress', function (e) {\n          if (_this2.options.sortable && $(e.currentTarget).data().sortable) {\n            var code = e.keyCode || e.which;\n\n            if (code === 13) {\n              // Enter keycode\n              _this2.onSort(e);\n            }\n          }\n        });\n        $(window).off('resize.bootstrap-table');\n\n        if (!this.options.showHeader || this.options.cardView) {\n          this.$header.hide();\n          this.$tableHeader.hide();\n          this.$tableLoading.css('top', 0);\n        } else {\n          this.$header.show();\n          this.$tableHeader.show();\n          this.$tableLoading.css('top', this.$header.outerHeight() + 1); // Assign the correct sortable arrow\n\n          this.getCaret();\n          $(window).on('resize.bootstrap-table', function (e) {\n            return _this2.resetWidth(e);\n          });\n        }\n\n        this.$selectAll = this.$header.find('[name=\"btSelectAll\"]');\n        this.$selectAll.off('click').on('click', function (_ref5) {\n          var currentTarget = _ref5.currentTarget;\n          var checked = $(currentTarget).prop('checked');\n\n          _this2[checked ? 'checkAll' : 'uncheckAll']();\n\n          _this2.updateSelected();\n        });\n      }\n    }, {\n      key: \"initFooter\",\n      value: function initFooter() {\n        if (!this.options.showFooter || this.options.cardView) {\n          this.$tableFooter.hide();\n        } else {\n          this.$tableFooter.show();\n        }\n      }\n    }, {\n      key: \"initData\",\n      value: function initData(data, type) {\n        if (type === 'append') {\n          this.options.data = this.options.data.concat(data);\n        } else if (type === 'prepend') {\n          this.options.data = [].concat(data).concat(this.options.data);\n        } else {\n          this.options.data = data || this.options.data;\n        }\n\n        this.data = this.options.data;\n\n        if (this.options.sidePagination === 'server') {\n          return;\n        }\n\n        this.initSort();\n      }\n    }, {\n      key: \"initSort\",\n      value: function initSort() {\n        var _this3 = this;\n\n        var name = this.options.sortName;\n        var order = this.options.sortOrder === 'desc' ? -1 : 1;\n        var index = this.header.fields.indexOf(this.options.sortName);\n        var timeoutId = 0;\n\n        if (index !== -1) {\n          if (this.options.sortStable) {\n            this.data.forEach(function (row, i) {\n              if (!row.hasOwnProperty('_position')) {\n                row._position = i;\n              }\n            });\n          }\n\n          if (this.options.customSort) {\n            Utils.calculateObjectValue(this.options, this.options.customSort, [this.options.sortName, this.options.sortOrder, this.data]);\n          } else {\n            this.data.sort(function (a, b) {\n              if (_this3.header.sortNames[index]) {\n                name = _this3.header.sortNames[index];\n              }\n\n              var aa = Utils.getItemField(a, name, _this3.options.escape);\n              var bb = Utils.getItemField(b, name, _this3.options.escape);\n              var value = Utils.calculateObjectValue(_this3.header, _this3.header.sorters[index], [aa, bb, a, b]);\n\n              if (value !== undefined) {\n                if (_this3.options.sortStable && value === 0) {\n                  return order * (a._position - b._position);\n                }\n\n                return order * value;\n              } // Fix #161: undefined or null string sort bug.\n\n\n              if (aa === undefined || aa === null) {\n                aa = '';\n              }\n\n              if (bb === undefined || bb === null) {\n                bb = '';\n              }\n\n              if (_this3.options.sortStable && aa === bb) {\n                aa = a._position;\n                bb = b._position;\n              } // IF both values are numeric, do a numeric comparison\n\n\n              if (Utils.isNumeric(aa) && Utils.isNumeric(bb)) {\n                // Convert numerical values form string to float.\n                aa = parseFloat(aa);\n                bb = parseFloat(bb);\n\n                if (aa < bb) {\n                  return order * -1;\n                }\n\n                if (aa > bb) {\n                  return order;\n                }\n\n                return 0;\n              }\n\n              if (aa === bb) {\n                return 0;\n              } // If value is not a string, convert to string\n\n\n              if (typeof aa !== 'string') {\n                aa = aa.toString();\n              }\n\n              if (aa.localeCompare(bb) === -1) {\n                return order * -1;\n              }\n\n              return order;\n            });\n          }\n\n          if (this.options.sortClass !== undefined) {\n            clearTimeout(timeoutId);\n            timeoutId = setTimeout(function () {\n              _this3.$el.removeClass(_this3.options.sortClass);\n\n              var index = _this3.$header.find(\"[data-field=\\\"\".concat(_this3.options.sortName, \"\\\"]\")).index();\n\n              _this3.$el.find(\"tr td:nth-child(\".concat(index + 1, \")\")).addClass(_this3.options.sortClass);\n            }, 250);\n          }\n        }\n      }\n    }, {\n      key: \"onSort\",\n      value: function onSort(_ref6) {\n        var type = _ref6.type,\n            currentTarget = _ref6.currentTarget;\n        var $this = type === 'keypress' ? $(currentTarget) : $(currentTarget).parent();\n        var $this_ = this.$header.find('th').eq($this.index());\n        this.$header.add(this.$header_).find('span.order').remove();\n\n        if (this.options.sortName === $this.data('field')) {\n          this.options.sortOrder = this.options.sortOrder === 'asc' ? 'desc' : 'asc';\n        } else {\n          this.options.sortName = $this.data('field');\n\n          if (this.options.rememberOrder) {\n            this.options.sortOrder = $this.data('order') === 'asc' ? 'desc' : 'asc';\n          } else {\n            this.options.sortOrder = this.columns[this.fieldsColumnsIndex[$this.data('field')]].order;\n          }\n        }\n\n        this.trigger('sort', this.options.sortName, this.options.sortOrder);\n        $this.add($this_).data('order', this.options.sortOrder); // Assign the correct sortable arrow\n\n        this.getCaret();\n\n        if (this.options.sidePagination === 'server') {\n          this.initServer(this.options.silentSort);\n          return;\n        }\n\n        this.initSort();\n        this.initBody();\n      }\n    }, {\n      key: \"initToolbar\",\n      value: function initToolbar() {\n        var _this4 = this;\n\n        var o = this.options;\n        var html = [];\n        var timeoutId = 0;\n        var $keepOpen;\n        var $search;\n        var switchableCount = 0;\n\n        if (this.$toolbar.find('.bs-bars').children().length) {\n          $('body').append($(o.toolbar));\n        }\n\n        this.$toolbar.html('');\n\n        if (typeof o.toolbar === 'string' || _typeof(o.toolbar) === 'object') {\n          $(Utils.sprintf('<div class=\"bs-bars %s-%s\"></div>', this.constants.classes.pull, o.toolbarAlign)).appendTo(this.$toolbar).append($(o.toolbar));\n        } // showColumns, showToggle, showRefresh\n\n\n        html = [\"<div class=\\\"\".concat(['columns', \"columns-\".concat(o.buttonsAlign), this.constants.classes.buttonsGroup, \"\".concat(this.constants.classes.pull, \"-\").concat(o.buttonsAlign)].join(' '), \"\\\">\")];\n\n        if (typeof o.icons === 'string') {\n          o.icons = Utils.calculateObjectValue(null, o.icons);\n        }\n\n        if (o.showPaginationSwitch) {\n          html.push(\"<button class=\\\"\".concat(this.constants.buttonsClass, \"\\\" type=\\\"button\\\" name=\\\"paginationSwitch\\\"\\n          aria-label=\\\"Pagination Switch\\\" title=\\\"\").concat(o.formatPaginationSwitch(), \"\\\">\\n          \").concat(Utils.sprintf(this.constants.html.icon, o.iconsPrefix, o.icons.paginationSwitchDown), \"\\n          </button>\"));\n        }\n\n        if (o.showRefresh) {\n          html.push(\"<button class=\\\"\".concat(this.constants.buttonsClass, \"\\\" type=\\\"button\\\" name=\\\"refresh\\\"\\n          aria-label=\\\"Refresh\\\" title=\\\"\").concat(o.formatRefresh(), \"\\\">\\n          \").concat(Utils.sprintf(this.constants.html.icon, o.iconsPrefix, o.icons.refresh), \"\\n          </button>\"));\n        }\n\n        if (o.showToggle) {\n          html.push(\"<button class=\\\"\".concat(this.constants.buttonsClass, \"\\\" type=\\\"button\\\" name=\\\"toggle\\\"\\n          aria-label=\\\"Toggle\\\" title=\\\"\").concat(o.formatToggle(), \"\\\">\\n          \").concat(Utils.sprintf(this.constants.html.icon, o.iconsPrefix, o.icons.toggleOff), \"\\n          </button>\"));\n        }\n\n        if (o.showFullscreen) {\n          html.push(\"<button class=\\\"\".concat(this.constants.buttonsClass, \"\\\" type=\\\"button\\\" name=\\\"fullscreen\\\"\\n          aria-label=\\\"Fullscreen\\\" title=\\\"\").concat(o.formatFullscreen(), \"\\\">\\n          \").concat(Utils.sprintf(this.constants.html.icon, o.iconsPrefix, o.icons.fullscreen), \"\\n          </button>\"));\n        }\n\n        if (o.showColumns) {\n          html.push(\"<div class=\\\"keep-open \".concat(this.constants.classes.buttonsDropdown, \"\\\" title=\\\"\").concat(o.formatColumns(), \"\\\">\\n          <button class=\\\"\").concat(this.constants.buttonsClass, \" dropdown-toggle\\\" type=\\\"button\\\" data-toggle=\\\"dropdown\\\"\\n          aria-label=\\\"Columns\\\" title=\\\"\").concat(o.formatFullscreen(), \"\\\">\\n          \").concat(Utils.sprintf(this.constants.html.icon, o.iconsPrefix, o.icons.columns), \"\\n          \").concat(this.constants.html.dropdownCaret, \"\\n          </button>\\n          \").concat(this.constants.html.toobarDropdow[0]));\n          this.columns.forEach(function (column, i) {\n            if (column.radio || column.checkbox) {\n              return;\n            }\n\n            if (o.cardView && !column.cardVisible) {\n              return;\n            }\n\n            var checked = column.visible ? ' checked=\"checked\"' : '';\n\n            if (column.switchable) {\n              html.push(Utils.sprintf(_this4.constants.html.toobarDropdowItem, Utils.sprintf('<input type=\"checkbox\" data-field=\"%s\" value=\"%s\"%s> <span>%s</span>', column.field, i, checked, column.title)));\n              switchableCount++;\n            }\n          });\n          html.push(this.constants.html.toobarDropdow[1], '</div>');\n        }\n\n        html.push('</div>'); // Fix #188: this.showToolbar is for extensions\n\n        if (this.showToolbar || html.length > 2) {\n          this.$toolbar.append(html.join(''));\n        }\n\n        if (o.showPaginationSwitch) {\n          this.$toolbar.find('button[name=\"paginationSwitch\"]').off('click').on('click', function () {\n            return _this4.togglePagination();\n          });\n        }\n\n        if (o.showFullscreen) {\n          this.$toolbar.find('button[name=\"fullscreen\"]').off('click').on('click', function () {\n            return _this4.toggleFullscreen();\n          });\n        }\n\n        if (o.showRefresh) {\n          this.$toolbar.find('button[name=\"refresh\"]').off('click').on('click', function () {\n            return _this4.refresh();\n          });\n        }\n\n        if (o.showToggle) {\n          this.$toolbar.find('button[name=\"toggle\"]').off('click').on('click', function () {\n            _this4.toggleView();\n          });\n        }\n\n        if (o.showColumns) {\n          $keepOpen = this.$toolbar.find('.keep-open');\n\n          if (switchableCount <= o.minimumCountColumns) {\n            $keepOpen.find('input').prop('disabled', true);\n          }\n\n          $keepOpen.find('li, label').off('click').on('click', function (e) {\n            e.stopImmediatePropagation();\n          });\n          $keepOpen.find('input').off('click').on('click', function (_ref7) {\n            var currentTarget = _ref7.currentTarget;\n            var $this = $(currentTarget);\n\n            _this4.toggleColumn($this.val(), $this.prop('checked'), false);\n\n            _this4.trigger('column-switch', $this.data('field'), $this.prop('checked'));\n          });\n        }\n\n        if (o.search) {\n          html = [];\n          html.push(\"<div class=\\\"\".concat(this.constants.classes.pull, \"-\").concat(o.searchAlign, \" search \").concat(this.constants.classes.inputGroup, \"\\\">\\n          <input class=\\\"\").concat(this.constants.classes.input).concat(Utils.sprintf(' input-%s', o.iconSize), \"\\\"\\n          type=\\\"text\\\" placeholder=\\\"\").concat(o.formatSearch(), \"\\\">\\n          </div>\"));\n          this.$toolbar.append(html.join(''));\n          $search = this.$toolbar.find('.search input');\n          $search.off('keyup drop blur').on('keyup drop blur', function (event) {\n            if (o.searchOnEnterKey && event.keyCode !== 13) {\n              return;\n            }\n\n            if ([37, 38, 39, 40].includes(event.keyCode)) {\n              return;\n            }\n\n            clearTimeout(timeoutId); // doesn't matter if it's 0\n\n            timeoutId = setTimeout(function () {\n              _this4.onSearch(event);\n            }, o.searchTimeOut);\n          });\n\n          if (Utils.isIEBrowser()) {\n            $search.off('mouseup').on('mouseup', function (event) {\n              clearTimeout(timeoutId); // doesn't matter if it's 0\n\n              timeoutId = setTimeout(function () {\n                _this4.onSearch(event);\n              }, o.searchTimeOut);\n            });\n          }\n        }\n      }\n    }, {\n      key: \"onSearch\",\n      value: function onSearch(_ref8) {\n        var currentTarget = _ref8.currentTarget,\n            firedByInitSearchText = _ref8.firedByInitSearchText;\n        var text = $(currentTarget).val().trim(); // trim search input\n\n        if (this.options.trimOnSearch && $(currentTarget).val() !== text) {\n          $(currentTarget).val(text);\n        }\n\n        if (text === this.searchText) {\n          return;\n        }\n\n        this.searchText = text;\n        this.options.searchText = text;\n\n        if (!firedByInitSearchText) {\n          this.options.pageNumber = 1;\n        }\n\n        this.initSearch();\n\n        if (firedByInitSearchText) {\n          if (this.options.sidePagination === 'client') {\n            this.updatePagination();\n          }\n        } else {\n          this.updatePagination();\n        }\n\n        this.trigger('search', text);\n      }\n    }, {\n      key: \"initSearch\",\n      value: function initSearch() {\n        var _this5 = this;\n\n        if (this.options.sidePagination !== 'server') {\n          if (this.options.customSearch) {\n            this.data = Utils.calculateObjectValue(this.options, this.options.customSearch, [this.options.data, this.searchText]);\n            return;\n          }\n\n          var s = this.searchText && (this.options.escape ? Utils.escapeHTML(this.searchText) : this.searchText).toLowerCase();\n          var f = Utils.isEmptyObject(this.filterColumns) ? null : this.filterColumns; // Check filter\n\n          this.data = f ? this.options.data.filter(function (item, i) {\n            for (var key in f) {\n              if (Array.isArray(f[key]) && !f[key].includes(item[key]) || !Array.isArray(f[key]) && item[key] !== f[key]) {\n                return false;\n              }\n            }\n\n            return true;\n          }) : this.options.data;\n          this.data = s ? this.data.filter(function (item, i) {\n            for (var j = 0; j < _this5.header.fields.length; j++) {\n              if (!_this5.header.searchables[j]) {\n                continue;\n              }\n\n              var key = Utils.isNumeric(_this5.header.fields[j]) ? parseInt(_this5.header.fields[j], 10) : _this5.header.fields[j];\n              var column = _this5.columns[_this5.fieldsColumnsIndex[key]];\n              var value = void 0;\n\n              if (typeof key === 'string') {\n                value = item;\n                var props = key.split('.');\n\n                for (var _i4 = 0; _i4 < props.length; _i4++) {\n                  if (value[props[_i4]] !== null) {\n                    value = value[props[_i4]];\n                  }\n                }\n              } else {\n                value = item[key];\n              } // Fix #142: respect searchForamtter boolean\n\n\n              if (column && column.searchFormatter) {\n                value = Utils.calculateObjectValue(column, _this5.header.formatters[j], [value, item, i], value);\n              }\n\n              if (typeof value === 'string' || typeof value === 'number') {\n                if (_this5.options.strictSearch) {\n                  if (\"\".concat(value).toLowerCase() === s) {\n                    return true;\n                  }\n                } else {\n                  if (\"\".concat(value).toLowerCase().includes(s)) {\n                    return true;\n                  }\n                }\n              }\n            }\n\n            return false;\n          }) : this.data;\n        }\n      }\n    }, {\n      key: \"initPagination\",\n      value: function initPagination() {\n        var _this6 = this;\n\n        var o = this.options;\n\n        if (!o.pagination) {\n          this.$pagination.hide();\n          return;\n        }\n\n        this.$pagination.show();\n        var html = [];\n        var $allSelected = false;\n        var i;\n        var from;\n        var to;\n        var $pageList;\n        var $pre;\n        var $next;\n        var $number;\n        var data = this.getData();\n        var pageList = o.pageList;\n\n        if (o.sidePagination !== 'server') {\n          o.totalRows = data.length;\n        }\n\n        this.totalPages = 0;\n\n        if (o.totalRows) {\n          if (o.pageSize === o.formatAllRows()) {\n            o.pageSize = o.totalRows;\n            $allSelected = true;\n          } else if (o.pageSize === o.totalRows) {\n            // Fix #667 Table with pagination,\n            // multiple pages and a search this matches to one page throws exception\n            var pageLst = typeof o.pageList === 'string' ? o.pageList.replace('[', '').replace(']', '').replace(/ /g, '').toLowerCase().split(',') : o.pageList;\n\n            if (pageLst.includes(o.formatAllRows().toLowerCase())) {\n              $allSelected = true;\n            }\n          }\n\n          this.totalPages = ~~((o.totalRows - 1) / o.pageSize) + 1;\n          o.totalPages = this.totalPages;\n        }\n\n        if (this.totalPages > 0 && o.pageNumber > this.totalPages) {\n          o.pageNumber = this.totalPages;\n        }\n\n        this.pageFrom = (o.pageNumber - 1) * o.pageSize + 1;\n        this.pageTo = o.pageNumber * o.pageSize;\n\n        if (this.pageTo > o.totalRows) {\n          this.pageTo = o.totalRows;\n        }\n\n        var paginationInfo = o.onlyInfoPagination ? o.formatDetailPagination(o.totalRows) : o.formatShowingRows(this.pageFrom, this.pageTo, o.totalRows);\n        html.push(\"<div class=\\\"\".concat(this.constants.classes.pull, \"-\").concat(o.paginationDetailHAlign, \" pagination-detail\\\">\\n        <span class=\\\"pagination-info\\\">\\n        \").concat(paginationInfo, \"\\n        </span>\"));\n\n        if (!o.onlyInfoPagination) {\n          html.push('<span class=\"page-list\">');\n          var pageNumber = [\"<span class=\\\"\".concat(this.constants.classes.paginationDropdown, \"\\\">\\n          <button class=\\\"\").concat(this.constants.buttonsClass, \" dropdown-toggle\\\" type=\\\"button\\\" data-toggle=\\\"dropdown\\\">\\n          <span class=\\\"page-size\\\">\\n          \").concat($allSelected ? o.formatAllRows() : o.pageSize, \"\\n          </span>\\n          \").concat(this.constants.html.dropdownCaret, \"\\n          </button>\\n          \").concat(this.constants.html.pageDropdown[0])];\n\n          if (typeof o.pageList === 'string') {\n            var list = o.pageList.replace('[', '').replace(']', '').replace(/ /g, '').split(',');\n            pageList = [];\n            var _iteratorNormalCompletion7 = true;\n            var _didIteratorError7 = false;\n            var _iteratorError7 = undefined;\n\n            try {\n              for (var _iterator7 = list[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                var value = _step7.value;\n                pageList.push(value.toUpperCase() === o.formatAllRows().toUpperCase() || value.toUpperCase() === 'UNLIMITED' ? o.formatAllRows() : +value);\n              }\n            } catch (err) {\n              _didIteratorError7 = true;\n              _iteratorError7 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n                  _iterator7.return();\n                }\n              } finally {\n                if (_didIteratorError7) {\n                  throw _iteratorError7;\n                }\n              }\n            }\n          }\n\n          pageList.forEach(function (page, i) {\n            if (!o.smartDisplay || i === 0 || pageList[i - 1] < o.totalRows) {\n              var active;\n\n              if ($allSelected) {\n                active = page === o.formatAllRows() ? _this6.constants.classes.dropdownActive : '';\n              } else {\n                active = page === o.pageSize ? _this6.constants.classes.dropdownActive : '';\n              }\n\n              pageNumber.push(Utils.sprintf(_this6.constants.html.pageDropdownItem, active, page));\n            }\n          });\n          pageNumber.push(\"\".concat(this.constants.html.pageDropdown[1], \"</span>\"));\n          html.push(o.formatRecordsPerPage(pageNumber.join('')));\n          html.push('</span></div>');\n          html.push(\"<div class=\\\"\".concat(this.constants.classes.pull, \"-\").concat(o.paginationHAlign, \" pagination\\\">\"), Utils.sprintf(this.constants.html.pagination[0], Utils.sprintf(' pagination-%s', o.iconSize)), Utils.sprintf(this.constants.html.paginationItem, ' page-pre', o.paginationPreText));\n\n          if (this.totalPages < o.paginationSuccessivelySize) {\n            from = 1;\n            to = this.totalPages;\n          } else {\n            from = o.pageNumber - o.paginationPagesBySide;\n            to = from + o.paginationPagesBySide * 2;\n          }\n\n          if (o.pageNumber < o.paginationSuccessivelySize - 1) {\n            to = o.paginationSuccessivelySize;\n          }\n\n          if (to > this.totalPages) {\n            to = this.totalPages;\n          }\n\n          if (o.paginationSuccessivelySize > this.totalPages - from) {\n            from = from - (o.paginationSuccessivelySize - (this.totalPages - from)) + 1;\n          }\n\n          if (from < 1) {\n            from = 1;\n          }\n\n          if (to > this.totalPages) {\n            to = this.totalPages;\n          }\n\n          var middleSize = Math.round(o.paginationPagesBySide / 2);\n\n          var pageItem = function pageItem(i) {\n            var classes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n            return Utils.sprintf(_this6.constants.html.paginationItem, classes + (i === o.pageNumber ? \" \".concat(_this6.constants.classes.paginationActive) : ''), i);\n          };\n\n          if (from > 1) {\n            var max = o.paginationPagesBySide;\n            if (max >= from) max = from - 1;\n\n            for (i = 1; i <= max; i++) {\n              html.push(pageItem(i));\n            }\n\n            if (from - 1 === max + 1) {\n              i = from - 1;\n              html.push(pageItem(i));\n            } else {\n              if (from - 1 > max) {\n                if (from - o.paginationPagesBySide * 2 > o.paginationPagesBySide && o.paginationUseIntermediate) {\n                  i = Math.round((from - middleSize) / 2 + middleSize);\n                  html.push(pageItem(i, ' page-intermediate'));\n                } else {\n                  html.push(Utils.sprintf(this.constants.html.paginationItem, ' page-first-separator disabled', '...'));\n                }\n              }\n            }\n          }\n\n          for (i = from; i <= to; i++) {\n            html.push(pageItem(i));\n          }\n\n          if (this.totalPages > to) {\n            var min = this.totalPages - (o.paginationPagesBySide - 1);\n            if (to >= min) min = to + 1;\n\n            if (to + 1 === min - 1) {\n              i = to + 1;\n              html.push(pageItem(i));\n            } else {\n              if (min > to + 1) {\n                if (this.totalPages - to > o.paginationPagesBySide * 2 && o.paginationUseIntermediate) {\n                  i = Math.round((this.totalPages - middleSize - to) / 2 + to);\n                  html.push(pageItem(i, ' page-intermediate'));\n                } else {\n                  html.push(Utils.sprintf(this.constants.html.paginationItem, ' page-last-separator disabled', '...'));\n                }\n              }\n            }\n\n            for (i = min; i <= this.totalPages; i++) {\n              html.push(pageItem(i));\n            }\n          }\n\n          html.push(Utils.sprintf(this.constants.html.paginationItem, ' page-next', o.paginationNextText));\n          html.push(this.constants.html.pagination[1], '</div>');\n        }\n\n        this.$pagination.html(html.join(''));\n        var dropupClass = ['bottom', 'both'].includes(o.paginationVAlign) ? \" \".concat(this.constants.classes.dropup) : '';\n        this.$pagination.last().find('.page-list > span').addClass(dropupClass);\n\n        if (!o.onlyInfoPagination) {\n          $pageList = this.$pagination.find('.page-list a');\n          $pre = this.$pagination.find('.page-pre');\n          $next = this.$pagination.find('.page-next');\n          $number = this.$pagination.find('.page-item').not('.page-next, .page-pre');\n\n          if (o.smartDisplay) {\n            if (this.totalPages <= 1) {\n              this.$pagination.find('div.pagination').hide();\n            }\n\n            if (pageList.length < 2 || o.totalRows <= pageList[0]) {\n              this.$pagination.find('span.page-list').hide();\n            } // when data is empty, hide the pagination\n\n\n            this.$pagination[this.getData().length ? 'show' : 'hide']();\n          }\n\n          if (!o.paginationLoop) {\n            if (o.pageNumber === 1) {\n              $pre.addClass('disabled');\n            }\n\n            if (o.pageNumber === this.totalPages) {\n              $next.addClass('disabled');\n            }\n          }\n\n          if ($allSelected) {\n            o.pageSize = o.formatAllRows();\n          } // removed the events for last and first, onPageNumber executeds the same logic\n\n\n          $pageList.off('click').on('click', function (e) {\n            return _this6.onPageListChange(e);\n          });\n          $pre.off('click').on('click', function (e) {\n            return _this6.onPagePre(e);\n          });\n          $next.off('click').on('click', function (e) {\n            return _this6.onPageNext(e);\n          });\n          $number.off('click').on('click', function (e) {\n            return _this6.onPageNumber(e);\n          });\n        }\n      }\n    }, {\n      key: \"updatePagination\",\n      value: function updatePagination(event) {\n        // Fix #171: IE disabled button can be clicked bug.\n        if (event && $(event.currentTarget).hasClass('disabled')) {\n          return;\n        }\n\n        if (!this.options.maintainSelected) {\n          this.resetRows();\n        }\n\n        this.initPagination();\n\n        if (this.options.sidePagination === 'server') {\n          this.initServer();\n        } else {\n          this.initBody();\n        }\n\n        this.trigger('page-change', this.options.pageNumber, this.options.pageSize);\n      }\n    }, {\n      key: \"onPageListChange\",\n      value: function onPageListChange(event) {\n        event.preventDefault();\n        var $this = $(event.currentTarget);\n        $this.parent().addClass(this.constants.classes.dropdownActive).siblings().removeClass(this.constants.classes.dropdownActive);\n        this.options.pageSize = $this.text().toUpperCase() === this.options.formatAllRows().toUpperCase() ? this.options.formatAllRows() : +$this.text();\n        this.$toolbar.find('.page-size').text(this.options.pageSize);\n        this.updatePagination(event);\n        return false;\n      }\n    }, {\n      key: \"onPagePre\",\n      value: function onPagePre(event) {\n        event.preventDefault();\n\n        if (this.options.pageNumber - 1 === 0) {\n          this.options.pageNumber = this.options.totalPages;\n        } else {\n          this.options.pageNumber--;\n        }\n\n        this.updatePagination(event);\n        return false;\n      }\n    }, {\n      key: \"onPageNext\",\n      value: function onPageNext(event) {\n        event.preventDefault();\n\n        if (this.options.pageNumber + 1 > this.options.totalPages) {\n          this.options.pageNumber = 1;\n        } else {\n          this.options.pageNumber++;\n        }\n\n        this.updatePagination(event);\n        return false;\n      }\n    }, {\n      key: \"onPageNumber\",\n      value: function onPageNumber(event) {\n        event.preventDefault();\n\n        if (this.options.pageNumber === +$(event.currentTarget).text()) {\n          return;\n        }\n\n        this.options.pageNumber = +$(event.currentTarget).text();\n        this.updatePagination(event);\n        return false;\n      }\n    }, {\n      key: \"initRow\",\n      value: function initRow(item, i, data, parentDom) {\n        var _this7 = this;\n\n        var html = [];\n        var style = {};\n        var csses = [];\n        var data_ = '';\n        var attributes = {};\n        var htmlAttributes = [];\n\n        if (Utils.findIndex(this.hiddenRows, item) > -1) {\n          return;\n        }\n\n        style = Utils.calculateObjectValue(this.options, this.options.rowStyle, [item, i], style);\n\n        if (style && style.css) {\n          for (var _i5 = 0, _Object$entries2 = Object.entries(style.css); _i5 < _Object$entries2.length; _i5++) {\n            var _ref11 = _Object$entries2[_i5];\n\n            var _ref10 = _slicedToArray(_ref11, 2);\n\n            var key = _ref10[0];\n            var value = _ref10[1];\n            csses.push(\"\".concat(key, \": \").concat(value));\n          }\n        }\n\n        attributes = Utils.calculateObjectValue(this.options, this.options.rowAttributes, [item, i], attributes);\n\n        if (attributes) {\n          for (var _i6 = 0, _Object$entries3 = Object.entries(attributes); _i6 < _Object$entries3.length; _i6++) {\n            var _ref14 = _Object$entries3[_i6];\n\n            var _ref13 = _slicedToArray(_ref14, 2);\n\n            var _key2 = _ref13[0];\n            var _value2 = _ref13[1];\n            htmlAttributes.push(\"\".concat(_key2, \"=\\\"\").concat(Utils.escapeHTML(_value2), \"\\\"\"));\n          }\n        }\n\n        if (item._data && !Utils.isEmptyObject(item._data)) {\n          for (var _i7 = 0, _Object$entries4 = Object.entries(item._data); _i7 < _Object$entries4.length; _i7++) {\n            var _ref17 = _Object$entries4[_i7];\n\n            var _ref16 = _slicedToArray(_ref17, 2);\n\n            var k = _ref16[0];\n            var v = _ref16[1];\n\n            // ignore data-index\n            if (k === 'index') {\n              return;\n            }\n\n            data_ += \" data-\".concat(k, \"=\\\"\").concat(v, \"\\\"\");\n          }\n        }\n\n        html.push('<tr', Utils.sprintf(' %s', htmlAttributes.length ? htmlAttributes.join(' ') : undefined), Utils.sprintf(' id=\"%s\"', Array.isArray(item) ? undefined : item._id), Utils.sprintf(' class=\"%s\"', style.classes || (Array.isArray(item) ? undefined : item._class)), \" data-index=\\\"\".concat(i, \"\\\"\"), Utils.sprintf(' data-uniqueid=\"%s\"', item[this.options.uniqueId]), Utils.sprintf('%s', data_), '>');\n\n        if (this.options.cardView) {\n          html.push(\"<td colspan=\\\"\".concat(this.header.fields.length, \"\\\"><div class=\\\"card-views\\\">\"));\n        }\n\n        if (!this.options.cardView && this.options.detailView) {\n          html.push('<td>');\n\n          if (Utils.calculateObjectValue(null, this.options.detailFilter, [i, item])) {\n            html.push(\"\\n            <a class=\\\"detail-icon\\\" href=\\\"#\\\">\\n            \".concat(Utils.sprintf(this.constants.html.icon, this.options.iconsPrefix, this.options.icons.detailOpen), \"\\n            </a>\\n          \"));\n          }\n\n          html.push('</td>');\n        }\n\n        this.header.fields.forEach(function (field, j) {\n          var text = '';\n          var value_ = Utils.getItemField(item, field, _this7.options.escape);\n          var value = '';\n          var type = '';\n          var cellStyle = {};\n          var id_ = '';\n          var class_ = _this7.header.classes[j];\n          var style_ = '';\n          var data_ = '';\n          var rowspan_ = '';\n          var colspan_ = '';\n          var title_ = '';\n          var column = _this7.columns[j];\n\n          if (_this7.fromHtml && typeof value_ === 'undefined') {\n            if (!column.checkbox && !column.radio) {\n              return;\n            }\n          }\n\n          if (!column.visible) {\n            return;\n          }\n\n          if (_this7.options.cardView && !column.cardVisible) {\n            return;\n          }\n\n          if (column.escape) {\n            value_ = Utils.escapeHTML(value_);\n          }\n\n          if (csses.concat([_this7.header.styles[j]]).length) {\n            style_ = \" style=\\\"\".concat(csses.concat([_this7.header.styles[j]]).join('; '), \"\\\"\");\n          } // handle td's id and class\n\n\n          if (item[\"_\".concat(field, \"_id\")]) {\n            id_ = Utils.sprintf(' id=\"%s\"', item[\"_\".concat(field, \"_id\")]);\n          }\n\n          if (item[\"_\".concat(field, \"_class\")]) {\n            class_ = Utils.sprintf(' class=\"%s\"', item[\"_\".concat(field, \"_class\")]);\n          }\n\n          if (item[\"_\".concat(field, \"_rowspan\")]) {\n            rowspan_ = Utils.sprintf(' rowspan=\"%s\"', item[\"_\".concat(field, \"_rowspan\")]);\n          }\n\n          if (item[\"_\".concat(field, \"_colspan\")]) {\n            colspan_ = Utils.sprintf(' colspan=\"%s\"', item[\"_\".concat(field, \"_colspan\")]);\n          }\n\n          if (item[\"_\".concat(field, \"_title\")]) {\n            title_ = Utils.sprintf(' title=\"%s\"', item[\"_\".concat(field, \"_title\")]);\n          }\n\n          cellStyle = Utils.calculateObjectValue(_this7.header, _this7.header.cellStyles[j], [value_, item, i, field], cellStyle);\n\n          if (cellStyle.classes) {\n            class_ = \" class=\\\"\".concat(cellStyle.classes, \"\\\"\");\n          }\n\n          if (cellStyle.css) {\n            var csses_ = [];\n\n            for (var _i8 = 0, _Object$entries5 = Object.entries(cellStyle.css); _i8 < _Object$entries5.length; _i8++) {\n              var _ref20 = _Object$entries5[_i8];\n\n              var _ref19 = _slicedToArray(_ref20, 2);\n\n              var _key3 = _ref19[0];\n              var _value3 = _ref19[1];\n              csses_.push(\"\".concat(_key3, \": \").concat(_value3));\n            }\n\n            style_ = \" style=\\\"\".concat(csses_.concat(_this7.header.styles[j]).join('; '), \"\\\"\");\n          }\n\n          value = Utils.calculateObjectValue(column, _this7.header.formatters[j], [value_, item, i, field], value_);\n\n          if (item[\"_\".concat(field, \"_data\")] && !Utils.isEmptyObject(item[\"_\".concat(field, \"_data\")])) {\n            for (var _i9 = 0, _Object$entries6 = Object.entries(item[\"_\".concat(field, \"_data\")]); _i9 < _Object$entries6.length; _i9++) {\n              var _ref23 = _Object$entries6[_i9];\n\n              var _ref22 = _slicedToArray(_ref23, 2);\n\n              var _k2 = _ref22[0];\n              var _v = _ref22[1];\n\n              // ignore data-index\n              if (_k2 === 'index') {\n                return;\n              }\n\n              data_ += \" data-\".concat(_k2, \"=\\\"\").concat(_v, \"\\\"\");\n            }\n          }\n\n          if (column.checkbox || column.radio) {\n            type = column.checkbox ? 'checkbox' : type;\n            type = column.radio ? 'radio' : type;\n            var c = column['class'] || '';\n            var isChecked = value === true || value_ || value && value.checked;\n            var isDisabled = !column.checkboxEnabled || value && value.disabled;\n            text = [_this7.options.cardView ? \"<div class=\\\"card-view \".concat(c, \"\\\">\") : \"<td class=\\\"bs-checkbox \".concat(c, \"\\\">\"), \"<label>\\n              <input\\n              data-index=\\\"\".concat(i, \"\\\"\\n              name=\\\"\").concat(_this7.options.selectItemName, \"\\\"\\n              type=\\\"\").concat(type, \"\\\"\\n              \").concat(Utils.sprintf('value=\"%s\"', item[_this7.options.idField]), \"\\n              \").concat(Utils.sprintf('checked=\"%s\"', isChecked ? 'checked' : undefined), \"\\n              \").concat(Utils.sprintf('disabled=\"%s\"', isDisabled ? 'disabled' : undefined), \" />\\n              <span></span>\\n              </label>\"), _this7.header.formatters[j] && typeof value === 'string' ? value : '', _this7.options.cardView ? '</div>' : '</td>'].join('');\n            item[_this7.header.stateField] = value === true || !!value_ || value && value.checked;\n          } else {\n            value = typeof value === 'undefined' || value === null ? _this7.options.undefinedText : value;\n\n            if (_this7.options.cardView) {\n              var cardTitle = _this7.options.showHeader ? \"<span class=\\\"card-view-title\\\"\".concat(style_, \">\").concat(Utils.getFieldTitle(_this7.columns, field), \"</span>\") : '';\n              text = \"<div class=\\\"card-view\\\">\".concat(cardTitle, \"<span class=\\\"card-view-value\\\">\").concat(value, \"</span></div>\");\n\n              if (_this7.options.smartDisplay && value === '') {\n                text = '<div class=\"card-view\"></div>';\n              }\n            } else {\n              text = \"<td\".concat(id_).concat(class_).concat(style_).concat(data_).concat(rowspan_).concat(colspan_).concat(title_, \">\").concat(value, \"</td>\");\n            }\n          }\n\n          html.push(text);\n        });\n\n        if (this.options.cardView) {\n          html.push('</div></td>');\n        }\n\n        html.push('</tr>');\n        return html.join('');\n      }\n    }, {\n      key: \"initBody\",\n      value: function initBody(fixedScroll) {\n        var _this8 = this;\n\n        var data = this.getData();\n        this.trigger('pre-body', data);\n        this.$body = this.$el.find('>tbody');\n\n        if (!this.$body.length) {\n          this.$body = $('<tbody></tbody>').appendTo(this.$el);\n        } // Fix #389 Bootstrap-table-flatJSON is not working\n\n\n        if (!this.options.pagination || this.options.sidePagination === 'server') {\n          this.pageFrom = 1;\n          this.pageTo = data.length;\n        }\n\n        var trFragments = $(document.createDocumentFragment());\n        var hasTr = false;\n\n        for (var i = this.pageFrom - 1; i < this.pageTo; i++) {\n          var item = data[i];\n          var tr = this.initRow(item, i, data, trFragments);\n          hasTr = hasTr || !!tr;\n\n          if (tr && typeof tr === 'string') {\n            trFragments.append(tr);\n          }\n        } // show no records\n\n\n        if (!hasTr) {\n          this.$body.html(\"<tr class=\\\"no-records-found\\\">\".concat(Utils.sprintf('<td colspan=\"%s\">%s</td>', this.$header.find('th').length, this.options.formatNoMatches()), \"</tr>\"));\n        } else {\n          this.$body.html(trFragments);\n        }\n\n        if (!fixedScroll) {\n          this.scrollTo(0);\n        } // click to select by column\n\n\n        this.$body.find('> tr[data-index] > td').off('click dblclick').on('click dblclick', function (_ref24) {\n          var currentTarget = _ref24.currentTarget,\n              type = _ref24.type,\n              target = _ref24.target;\n          var $td = $(currentTarget);\n          var $tr = $td.parent();\n          var $cardviewArr = $(target).parents('.card-views').children();\n          var $cardviewTarget = $(target).parents('.card-view');\n\n          var item = _this8.data[$tr.data('index')];\n\n          var index = _this8.options.cardView ? $cardviewArr.index($cardviewTarget) : $td[0].cellIndex;\n\n          var fields = _this8.getVisibleFields();\n\n          var field = fields[_this8.options.detailView && !_this8.options.cardView ? index - 1 : index];\n          var column = _this8.columns[_this8.fieldsColumnsIndex[field]];\n          var value = Utils.getItemField(item, field, _this8.options.escape);\n\n          if ($td.find('.detail-icon').length) {\n            return;\n          }\n\n          _this8.trigger(type === 'click' ? 'click-cell' : 'dbl-click-cell', field, value, item, $td);\n\n          _this8.trigger(type === 'click' ? 'click-row' : 'dbl-click-row', item, $tr, field); // if click to select - then trigger the checkbox/radio click\n\n\n          if (type === 'click' && _this8.options.clickToSelect && column.clickToSelect && !Utils.calculateObjectValue(_this8.options, _this8.options.ignoreClickToSelectOn, [target])) {\n            var $selectItem = $tr.find(Utils.sprintf('[name=\"%s\"]', _this8.options.selectItemName));\n\n            if ($selectItem.length) {\n              $selectItem[0].click(); // #144: .trigger('click') bug\n            }\n          }\n        });\n        this.$body.find('> tr[data-index] > td > .detail-icon').off('click').on('click', function (e) {\n          e.preventDefault();\n          var $this = $(e.currentTarget); // Fix #980 Detail view, when searching, returns wrong row\n\n          var $tr = $this.parent().parent();\n          var index = $tr.data('index');\n          var row = data[index]; // remove and update\n\n          if ($tr.next().is('tr.detail-view')) {\n            $this.html(Utils.sprintf(_this8.constants.html.icon, _this8.options.iconsPrefix, _this8.options.icons.detailOpen));\n\n            _this8.trigger('collapse-row', index, row, $tr.next());\n\n            $tr.next().remove();\n          } else {\n            $this.html(Utils.sprintf(_this8.constants.html.icon, _this8.options.iconsPrefix, _this8.options.icons.detailClose));\n            $tr.after(Utils.sprintf('<tr class=\"detail-view\"><td colspan=\"%s\"></td></tr>', $tr.children('td').length));\n            var $element = $tr.next().find('td');\n            var content = Utils.calculateObjectValue(_this8.options, _this8.options.detailFormatter, [index, row, $element], '');\n\n            if ($element.length === 1) {\n              $element.append(content);\n            }\n\n            _this8.trigger('expand-row', index, row, $element);\n          }\n\n          _this8.resetView();\n\n          return false;\n        });\n        this.$selectItem = this.$body.find(Utils.sprintf('[name=\"%s\"]', this.options.selectItemName));\n        this.$selectItem.off('click').on('click', function (e) {\n          e.stopImmediatePropagation();\n          var $this = $(e.currentTarget);\n\n          _this8.check_($this.prop('checked'), $this.data('index'));\n        });\n        this.header.events.forEach(function (_events, i) {\n          var events = _events;\n\n          if (!events) {\n            return;\n          } // fix bug, if events is defined with namespace\n\n\n          if (typeof events === 'string') {\n            events = Utils.calculateObjectValue(null, events);\n          }\n\n          var field = _this8.header.fields[i];\n\n          var fieldIndex = _this8.getVisibleFields().indexOf(field);\n\n          if (fieldIndex === -1) {\n            return;\n          }\n\n          if (_this8.options.detailView && !_this8.options.cardView) {\n            fieldIndex += 1;\n          }\n\n          var _loop = function _loop() {\n            var _ref25 = _Object$entries7[_i10];\n            _ref26 = _slicedToArray(_ref25, 2);\n            var key = _ref26[0];\n            var event = _ref26[1];\n\n            _this8.$body.find('>tr:not(.no-records-found)').each(function (i, tr) {\n              var $tr = $(tr);\n              var $td = $tr.find(_this8.options.cardView ? '.card-view' : 'td').eq(fieldIndex);\n              var index = key.indexOf(' ');\n              var name = key.substring(0, index);\n              var el = key.substring(index + 1);\n              $td.find(el).off(name).on(name, function (e) {\n                var index = $tr.data('index');\n                var row = _this8.data[index];\n                var value = row[field];\n                event.apply(_this8, [e, value, row, index]);\n              });\n            });\n          };\n\n          for (var _i10 = 0, _Object$entries7 = Object.entries(events); _i10 < _Object$entries7.length; _i10++) {\n            var _ref26;\n\n            _loop();\n          }\n        });\n        this.updateSelected();\n        this.resetView();\n        this.trigger('post-body', data);\n      }\n    }, {\n      key: \"initServer\",\n      value: function initServer(silent, query, url) {\n        var _this9 = this;\n\n        var data = {};\n        var index = this.header.fields.indexOf(this.options.sortName);\n        var params = {\n          searchText: this.searchText,\n          sortName: this.options.sortName,\n          sortOrder: this.options.sortOrder\n        };\n\n        if (this.header.sortNames[index]) {\n          params.sortName = this.header.sortNames[index];\n        }\n\n        if (this.options.pagination && this.options.sidePagination === 'server') {\n          params.pageSize = this.options.pageSize === this.options.formatAllRows() ? this.options.totalRows : this.options.pageSize;\n          params.pageNumber = this.options.pageNumber;\n        }\n\n        if (!(url || this.options.url) && !this.options.ajax) {\n          return;\n        }\n\n        if (this.options.queryParamsType === 'limit') {\n          params = {\n            search: params.searchText,\n            sort: params.sortName,\n            order: params.sortOrder\n          };\n\n          if (this.options.pagination && this.options.sidePagination === 'server') {\n            params.offset = this.options.pageSize === this.options.formatAllRows() ? 0 : this.options.pageSize * (this.options.pageNumber - 1);\n            params.limit = this.options.pageSize === this.options.formatAllRows() ? this.options.totalRows : this.options.pageSize;\n\n            if (params.limit === 0) {\n              delete params.limit;\n            }\n          }\n        }\n\n        if (!Utils.isEmptyObject(this.filterColumnsPartial)) {\n          params.filter = JSON.stringify(this.filterColumnsPartial, null);\n        }\n\n        data = Utils.calculateObjectValue(this.options, this.options.queryParams, [params], data);\n        $.extend(data, query || {}); // false to stop request\n\n        if (data === false) {\n          return;\n        }\n\n        if (!silent) {\n          this.showLoading();\n        }\n\n        var request = $.extend({}, Utils.calculateObjectValue(null, this.options.ajaxOptions), {\n          type: this.options.method,\n          url: url || this.options.url,\n          data: this.options.contentType === 'application/json' && this.options.method === 'post' ? JSON.stringify(data) : data,\n          cache: this.options.cache,\n          contentType: this.options.contentType,\n          dataType: this.options.dataType,\n          success: function success(_res) {\n            var res = Utils.calculateObjectValue(_this9.options, _this9.options.responseHandler, [_res], _res);\n\n            _this9.load(res);\n\n            _this9.trigger('load-success', res);\n\n            if (!silent) {\n              _this9.hideLoading();\n            }\n          },\n          error: function error(jqXHR) {\n            var data = [];\n\n            if (_this9.options.sidePagination === 'server') {\n              data = {};\n              data[_this9.options.totalField] = 0;\n              data[_this9.options.dataField] = [];\n            }\n\n            _this9.load(data);\n\n            _this9.trigger('load-error', jqXHR.status, jqXHR);\n\n            if (!silent) _this9.$tableLoading.hide();\n          }\n        });\n\n        if (this.options.ajax) {\n          Utils.calculateObjectValue(this, this.options.ajax, [request], null);\n        } else {\n          if (this._xhr && this._xhr.readyState !== 4) {\n            this._xhr.abort();\n          }\n\n          this._xhr = $.ajax(request);\n        }\n\n        return data;\n      }\n    }, {\n      key: \"initSearchText\",\n      value: function initSearchText() {\n        if (this.options.search) {\n          this.searchText = '';\n\n          if (this.options.searchText !== '') {\n            var $search = this.$toolbar.find('.search input');\n            $search.val(this.options.searchText);\n            this.onSearch({\n              currentTarget: $search,\n              firedByInitSearchText: true\n            });\n          }\n        }\n      }\n    }, {\n      key: \"getCaret\",\n      value: function getCaret() {\n        var _this10 = this;\n\n        this.$header.find('th').each(function (i, th) {\n          $(th).find('.sortable').removeClass('desc asc').addClass($(th).data('field') === _this10.options.sortName ? _this10.options.sortOrder : 'both');\n        });\n      }\n    }, {\n      key: \"updateSelected\",\n      value: function updateSelected() {\n        var checkAll = this.$selectItem.filter(':enabled').length && this.$selectItem.filter(':enabled').length === this.$selectItem.filter(':enabled').filter(':checked').length;\n        this.$selectAll.add(this.$selectAll_).prop('checked', checkAll);\n        this.$selectItem.each(function (i, el) {\n          $(el).closest('tr')[$(el).prop('checked') ? 'addClass' : 'removeClass']('selected');\n        });\n      }\n    }, {\n      key: \"updateRows\",\n      value: function updateRows() {\n        var _this11 = this;\n\n        this.$selectItem.each(function (i, el) {\n          _this11.data[$(el).data('index')][_this11.header.stateField] = $(el).prop('checked');\n        });\n      }\n    }, {\n      key: \"resetRows\",\n      value: function resetRows() {\n        var _iteratorNormalCompletion8 = true;\n        var _didIteratorError8 = false;\n        var _iteratorError8 = undefined;\n\n        try {\n          for (var _iterator8 = this.data[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n            var row = _step8.value;\n            this.$selectAll.prop('checked', false);\n            this.$selectItem.prop('checked', false);\n\n            if (this.header.stateField) {\n              row[this.header.stateField] = false;\n            }\n          }\n        } catch (err) {\n          _didIteratorError8 = true;\n          _iteratorError8 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n              _iterator8.return();\n            }\n          } finally {\n            if (_didIteratorError8) {\n              throw _iteratorError8;\n            }\n          }\n        }\n\n        this.initHiddenRows();\n      }\n    }, {\n      key: \"trigger\",\n      value: function trigger(_name) {\n        var _this$options;\n\n        var name = \"\".concat(_name, \".bs.table\");\n\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key4 = 1; _key4 < _len2; _key4++) {\n          args[_key4 - 1] = arguments[_key4];\n        }\n\n        (_this$options = this.options)[BootstrapTable.EVENTS[name]].apply(_this$options, args);\n\n        this.$el.trigger($.Event(name), args);\n        this.options.onAll(name, args);\n        this.$el.trigger($.Event('all.bs.table'), [name, args]);\n      }\n    }, {\n      key: \"resetHeader\",\n      value: function resetHeader() {\n        var _this12 = this;\n\n        // fix #61: the hidden table reset header bug.\n        // fix bug: get $el.css('width') error sometime (height = 500)\n        clearTimeout(this.timeoutId_);\n        this.timeoutId_ = setTimeout(function () {\n          return _this12.fitHeader();\n        }, this.$el.is(':hidden') ? 100 : 0);\n      }\n    }, {\n      key: \"fitHeader\",\n      value: function fitHeader() {\n        var _this13 = this;\n\n        if (this.$el.is(':hidden')) {\n          this.timeoutId_ = setTimeout(function () {\n            return _this13.fitHeader();\n          }, 100);\n          return;\n        }\n\n        var fixedBody = this.$tableBody.get(0);\n        var scrollWidth = fixedBody.scrollWidth > fixedBody.clientWidth && fixedBody.scrollHeight > fixedBody.clientHeight + this.$header.outerHeight() ? Utils.getScrollBarWidth() : 0;\n        this.$el.css('margin-top', -this.$header.outerHeight());\n        var focused = $(':focus');\n\n        if (focused.length > 0) {\n          var $th = focused.parents('th');\n\n          if ($th.length > 0) {\n            var dataField = $th.attr('data-field');\n\n            if (dataField !== undefined) {\n              var $headerTh = this.$header.find(\"[data-field='\".concat(dataField, \"']\"));\n\n              if ($headerTh.length > 0) {\n                $headerTh.find(':input').addClass('focus-temp');\n              }\n            }\n          }\n        }\n\n        this.$header_ = this.$header.clone(true, true);\n        this.$selectAll_ = this.$header_.find('[name=\"btSelectAll\"]');\n        this.$tableHeader.css('margin-right', scrollWidth).find('table').css('width', this.$el.outerWidth()).html('').attr('class', this.$el.attr('class')).append(this.$header_);\n        this.$tableLoading.css('width', this.$el.outerWidth());\n        var focusedTemp = $('.focus-temp:visible:eq(0)');\n\n        if (focusedTemp.length > 0) {\n          focusedTemp.focus();\n          this.$header.find('.focus-temp').removeClass('focus-temp');\n        } // fix bug: $.data() is not working as expected after $.append()\n\n\n        this.$header.find('th[data-field]').each(function (i, el) {\n          _this13.$header_.find(Utils.sprintf('th[data-field=\"%s\"]', $(el).data('field'))).data($(el).data());\n        });\n        var visibleFields = this.getVisibleFields();\n        var $ths = this.$header_.find('th');\n        var $tr = this.$body.find('>tr:first-child:not(.no-records-found)');\n\n        while ($tr.length && $tr.find('>td[colspan]:not([colspan=\"1\"])').length) {\n          $tr = $tr.next();\n        }\n\n        $tr.find('> *').each(function (i, el) {\n          var $this = $(el);\n          var index = i;\n\n          if (_this13.options.detailView && !_this13.options.cardView) {\n            if (i === 0) {\n              var $thDetail = $ths.filter('.detail');\n\n              var _zoomWidth = $thDetail.width() - $thDetail.find('.fht-cell').width();\n\n              $thDetail.find('.fht-cell').width($this.innerWidth() - _zoomWidth);\n            }\n\n            index = i - 1;\n          }\n\n          if (index === -1) {\n            return;\n          }\n\n          var $th = _this13.$header_.find(Utils.sprintf('th[data-field=\"%s\"]', visibleFields[index]));\n\n          if ($th.length > 1) {\n            $th = $($ths[$this[0].cellIndex]);\n          }\n\n          var zoomWidth = $th.width() - $th.find('.fht-cell').width();\n          $th.find('.fht-cell').width($this.innerWidth() - zoomWidth);\n        });\n        this.horizontalScroll();\n        this.trigger('post-header');\n      }\n    }, {\n      key: \"resetFooter\",\n      value: function resetFooter() {\n        var data = this.getData();\n        var html = [];\n\n        if (!this.options.showFooter || this.options.cardView) {\n          // do nothing\n          return;\n        }\n\n        if (!this.options.cardView && this.options.detailView) {\n          html.push('<th class=\"detail\"><div class=\"th-inner\"></div><div class=\"fht-cell\"></div></th>');\n        }\n\n        var _iteratorNormalCompletion9 = true;\n        var _didIteratorError9 = false;\n        var _iteratorError9 = undefined;\n\n        try {\n          for (var _iterator9 = this.columns[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n            var column = _step9.value;\n            var falign = '';\n            var valign = '';\n            var csses = [];\n            var style = {};\n            var class_ = Utils.sprintf(' class=\"%s\"', column['class']);\n\n            if (!column.visible) {\n              continue;\n            }\n\n            if (this.options.cardView && !column.cardVisible) {\n              return;\n            }\n\n            falign = Utils.sprintf('text-align: %s; ', column.falign ? column.falign : column.align);\n            valign = Utils.sprintf('vertical-align: %s; ', column.valign);\n            style = Utils.calculateObjectValue(null, this.options.footerStyle, [column]);\n\n            if (style && style.css) {\n              for (var _i11 = 0, _Object$entries8 = Object.entries(style.css); _i11 < _Object$entries8.length; _i11++) {\n                var _ref29 = _Object$entries8[_i11];\n\n                var _ref28 = _slicedToArray(_ref29, 2);\n\n                var key = _ref28[0];\n                var value = _ref28[1];\n                csses.push(\"\".concat(key, \": \").concat(value));\n              }\n            }\n\n            if (style && style.classes) {\n              class_ = Utils.sprintf(' class=\"%s\"', column['class'] ? [column['class'], style.classes].join(' ') : style.classes);\n            }\n\n            html.push('<th', class_, Utils.sprintf(' style=\"%s\"', falign + valign + csses.concat().join('; ')), '>');\n            html.push('<div class=\"th-inner\">');\n            html.push(Utils.calculateObjectValue(column, column.footerFormatter, [data], ''));\n            html.push('</div>');\n            html.push('<div class=\"fht-cell\"></div>');\n            html.push('</div>');\n            html.push('</th>');\n          }\n        } catch (err) {\n          _didIteratorError9 = true;\n          _iteratorError9 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n              _iterator9.return();\n            }\n          } finally {\n            if (_didIteratorError9) {\n              throw _iteratorError9;\n            }\n          }\n        }\n\n        this.$tableFooter.find('tr').html(html.join(''));\n        this.$tableFooter.show();\n        this.fitFooter();\n      }\n    }, {\n      key: \"fitFooter\",\n      value: function fitFooter() {\n        var _this14 = this;\n\n        if (this.$el.is(':hidden')) {\n          setTimeout(function () {\n            return _this14.fitFooter();\n          }, 100);\n          return;\n        }\n\n        var fixedBody = this.$tableBody.get(0);\n        var scrollWidth = fixedBody.scrollWidth > fixedBody.clientWidth && fixedBody.scrollHeight > fixedBody.clientHeight + this.$header.outerHeight() ? Utils.getScrollBarWidth() : 0;\n        this.$tableFooter.css('margin-right', scrollWidth).find('table').css('width', this.$el.outerWidth()).attr('class', this.$el.attr('class'));\n        var visibleFields = this.getVisibleFields();\n        var $ths = this.$tableFooter.find('th');\n        var $tr = this.$body.find('>tr:first-child:not(.no-records-found)');\n\n        while ($tr.length && $tr.find('>td[colspan]:not([colspan=\"1\"])').length) {\n          $tr = $tr.next();\n        }\n\n        $tr.find('> *').each(function (i, el) {\n          var $this = $(el);\n          var index = i;\n\n          if (_this14.options.detailView && !_this14.options.cardView) {\n            if (i === 0) {\n              var $thDetail = $ths.filter('.detail');\n\n              var _zoomWidth2 = $thDetail.width() - $thDetail.find('.fht-cell').width();\n\n              $thDetail.find('.fht-cell').width($this.innerWidth() - _zoomWidth2);\n            }\n\n            index = i - 1;\n          }\n\n          if (index === -1) {\n            return;\n          }\n\n          var $th = $ths.eq(i);\n          var zoomWidth = $th.width() - $th.find('.fht-cell').width();\n          $th.find('.fht-cell').width($this.innerWidth() - zoomWidth);\n        });\n        this.horizontalScroll();\n      }\n    }, {\n      key: \"horizontalScroll\",\n      value: function horizontalScroll() {\n        var _this15 = this;\n\n        // horizontal scroll event\n        // TODO: it's probably better improving the layout than binding to scroll event\n        this.trigger('scroll-body');\n        this.$tableBody.off('scroll').on('scroll', function (_ref30) {\n          var currentTarget = _ref30.currentTarget;\n\n          if (_this15.options.showHeader && _this15.options.height) {\n            _this15.$tableHeader.scrollLeft($(currentTarget).scrollLeft());\n          }\n\n          if (_this15.options.showFooter && !_this15.options.cardView) {\n            _this15.$tableFooter.scrollLeft($(currentTarget).scrollLeft());\n          }\n        });\n      }\n    }, {\n      key: \"toggleColumn\",\n      value: function toggleColumn(index, checked, needUpdate) {\n        if (index === -1) {\n          return;\n        }\n\n        this.columns[index].visible = checked;\n        this.initHeader();\n        this.initSearch();\n        this.initPagination();\n        this.initBody();\n\n        if (this.options.showColumns) {\n          var $items = this.$toolbar.find('.keep-open input').prop('disabled', false);\n\n          if (needUpdate) {\n            $items.filter(Utils.sprintf('[value=\"%s\"]', index)).prop('checked', checked);\n          }\n\n          if ($items.filter(':checked').length <= this.options.minimumCountColumns) {\n            $items.filter(':checked').prop('disabled', true);\n          }\n        }\n      }\n    }, {\n      key: \"getVisibleFields\",\n      value: function getVisibleFields() {\n        var visibleFields = [];\n        var _iteratorNormalCompletion10 = true;\n        var _didIteratorError10 = false;\n        var _iteratorError10 = undefined;\n\n        try {\n          for (var _iterator10 = this.header.fields[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n            var field = _step10.value;\n            var column = this.columns[this.fieldsColumnsIndex[field]];\n\n            if (!column.visible) {\n              continue;\n            }\n\n            visibleFields.push(field);\n          }\n        } catch (err) {\n          _didIteratorError10 = true;\n          _iteratorError10 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n              _iterator10.return();\n            }\n          } finally {\n            if (_didIteratorError10) {\n              throw _iteratorError10;\n            }\n          }\n        }\n\n        return visibleFields;\n      } // PUBLIC FUNCTION DEFINITION\n      // =======================\n\n    }, {\n      key: \"resetView\",\n      value: function resetView(params) {\n        var padding = 0;\n\n        if (params && params.height) {\n          this.options.height = params.height;\n        }\n\n        this.$selectAll.prop('checked', this.$selectItem.length > 0 && this.$selectItem.length === this.$selectItem.filter(':checked').length);\n\n        if (this.options.cardView) {\n          // remove the element css\n          this.$el.css('margin-top', '0');\n          this.$tableContainer.css('padding-bottom', '0');\n          this.$tableFooter.hide();\n          return;\n        }\n\n        if (this.options.showHeader && this.options.height) {\n          this.$tableHeader.show();\n          this.resetHeader();\n          padding += this.$header.outerHeight(true);\n        } else {\n          this.$tableHeader.hide();\n          this.trigger('post-header');\n        }\n\n        if (this.options.showFooter) {\n          this.resetFooter();\n\n          if (this.options.height) {\n            padding += this.$tableFooter.outerHeight(true);\n          }\n        }\n\n        if (this.options.height) {\n          var toolbarHeight = this.$toolbar.outerHeight(true);\n          var paginationHeight = this.$pagination.outerHeight(true);\n          var height = this.options.height - toolbarHeight - paginationHeight;\n          var tableHeight = this.$tableBody.find('table').outerHeight(true);\n          this.$tableContainer.css('height', \"\".concat(height, \"px\"));\n          this.$tableBorder && this.$tableBorder.css('height', \"\".concat(height - tableHeight - padding - 1, \"px\"));\n        } // Assign the correct sortable arrow\n\n\n        this.getCaret();\n        this.$tableContainer.css('padding-bottom', \"\".concat(padding, \"px\"));\n        this.trigger('reset-view');\n      }\n    }, {\n      key: \"getData\",\n      value: function getData(useCurrentPage) {\n        var data = this.options.data;\n\n        if (this.searchText || this.options.sortName || !Utils.isEmptyObject(this.filterColumns) || !Utils.isEmptyObject(this.filterColumnsPartial)) {\n          data = this.data;\n        }\n\n        if (useCurrentPage) {\n          return data.slice(this.pageFrom - 1, this.pageTo);\n        }\n\n        return data;\n      }\n    }, {\n      key: \"load\",\n      value: function load(_data) {\n        var fixedScroll = false;\n        var data = _data; // #431: support pagination\n\n        if (this.options.pagination && this.options.sidePagination === 'server') {\n          this.options.totalRows = data[this.options.totalField];\n        }\n\n        fixedScroll = data.fixedScroll;\n        data = Array.isArray(data) ? data : data[this.options.dataField];\n        this.initData(data);\n        this.initSearch();\n        this.initPagination();\n        this.initBody(fixedScroll);\n      }\n    }, {\n      key: \"append\",\n      value: function append(data) {\n        this.initData(data, 'append');\n        this.initSearch();\n        this.initPagination();\n        this.initSort();\n        this.initBody(true);\n      }\n    }, {\n      key: \"prepend\",\n      value: function prepend(data) {\n        this.initData(data, 'prepend');\n        this.initSearch();\n        this.initPagination();\n        this.initSort();\n        this.initBody(true);\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(params) {\n        var len = this.options.data.length;\n        var i;\n        var row;\n\n        if (!params.hasOwnProperty('field') || !params.hasOwnProperty('values')) {\n          return;\n        }\n\n        for (i = len - 1; i >= 0; i--) {\n          row = this.options.data[i];\n\n          if (!row.hasOwnProperty(params.field)) {\n            continue;\n          }\n\n          if (params.values.includes(row[params.field])) {\n            this.options.data.splice(i, 1);\n\n            if (this.options.sidePagination === 'server') {\n              this.options.totalRows -= 1;\n            }\n          }\n        }\n\n        if (len === this.options.data.length) {\n          return;\n        }\n\n        this.initSearch();\n        this.initPagination();\n        this.initSort();\n        this.initBody(true);\n      }\n    }, {\n      key: \"removeAll\",\n      value: function removeAll() {\n        if (this.options.data.length > 0) {\n          this.options.data.splice(0, this.options.data.length);\n          this.initSearch();\n          this.initPagination();\n          this.initBody(true);\n        }\n      }\n    }, {\n      key: \"getRowByUniqueId\",\n      value: function getRowByUniqueId(_id) {\n        var uniqueId = this.options.uniqueId;\n        var len = this.options.data.length;\n        var id = _id;\n        var dataRow = null;\n        var i;\n        var row;\n        var rowUniqueId;\n\n        for (i = len - 1; i >= 0; i--) {\n          row = this.options.data[i];\n\n          if (row.hasOwnProperty(uniqueId)) {\n            // uniqueId is a column\n            rowUniqueId = row[uniqueId];\n          } else if (row._data && row._data.hasOwnProperty(uniqueId)) {\n            // uniqueId is a row data property\n            rowUniqueId = row._data[uniqueId];\n          } else {\n            continue;\n          }\n\n          if (typeof rowUniqueId === 'string') {\n            id = id.toString();\n          } else if (typeof rowUniqueId === 'number') {\n            if (Number(rowUniqueId) === rowUniqueId && rowUniqueId % 1 === 0) {\n              id = parseInt(id);\n            } else if (rowUniqueId === Number(rowUniqueId) && rowUniqueId !== 0) {\n              id = parseFloat(id);\n            }\n          }\n\n          if (rowUniqueId === id) {\n            dataRow = row;\n            break;\n          }\n        }\n\n        return dataRow;\n      }\n    }, {\n      key: \"removeByUniqueId\",\n      value: function removeByUniqueId(id) {\n        var len = this.options.data.length;\n        var row = this.getRowByUniqueId(id);\n\n        if (row) {\n          this.options.data.splice(this.options.data.indexOf(row), 1);\n        }\n\n        if (len === this.options.data.length) {\n          return;\n        }\n\n        this.initSearch();\n        this.initPagination();\n        this.initBody(true);\n      }\n    }, {\n      key: \"updateByUniqueId\",\n      value: function updateByUniqueId(params) {\n        var allParams = Array.isArray(params) ? params : [params];\n        var _iteratorNormalCompletion11 = true;\n        var _didIteratorError11 = false;\n        var _iteratorError11 = undefined;\n\n        try {\n          for (var _iterator11 = allParams[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n            var _params = _step11.value;\n\n            if (!_params.hasOwnProperty('id') || !_params.hasOwnProperty('row')) {\n              continue;\n            }\n\n            var rowId = this.options.data.indexOf(this.getRowByUniqueId(_params.id));\n\n            if (rowId === -1) {\n              continue;\n            }\n\n            $.extend(this.options.data[rowId], _params.row);\n          }\n        } catch (err) {\n          _didIteratorError11 = true;\n          _iteratorError11 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion11 && _iterator11.return != null) {\n              _iterator11.return();\n            }\n          } finally {\n            if (_didIteratorError11) {\n              throw _iteratorError11;\n            }\n          }\n        }\n\n        this.initSearch();\n        this.initPagination();\n        this.initSort();\n        this.initBody(true);\n      }\n    }, {\n      key: \"refreshColumnTitle\",\n      value: function refreshColumnTitle(params) {\n        if (!params.hasOwnProperty('field') || !params.hasOwnProperty('title')) {\n          return;\n        }\n\n        this.columns[this.fieldsColumnsIndex[params.field]].title = this.options.escape ? Utils.escapeHTML(params.title) : params.title;\n\n        if (this.columns[this.fieldsColumnsIndex[params.field]].visible) {\n          var header = this.options.height !== undefined ? this.$tableHeader : this.$header;\n          header.find('th[data-field]').each(function (i, el) {\n            if ($(el).data('field') === params.field) {\n              $($(el).find('.th-inner')[0]).text(params.title);\n              return false;\n            }\n          });\n        }\n      }\n    }, {\n      key: \"insertRow\",\n      value: function insertRow(params) {\n        if (!params.hasOwnProperty('index') || !params.hasOwnProperty('row')) {\n          return;\n        }\n\n        this.options.data.splice(params.index, 0, params.row);\n        this.initSearch();\n        this.initPagination();\n        this.initSort();\n        this.initBody(true);\n      }\n    }, {\n      key: \"updateRow\",\n      value: function updateRow(params) {\n        var allParams = Array.isArray(params) ? params : [params];\n        var _iteratorNormalCompletion12 = true;\n        var _didIteratorError12 = false;\n        var _iteratorError12 = undefined;\n\n        try {\n          for (var _iterator12 = allParams[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n            var _params2 = _step12.value;\n\n            if (!_params2.hasOwnProperty('index') || !_params2.hasOwnProperty('row')) {\n              continue;\n            }\n\n            $.extend(this.options.data[_params2.index], _params2.row);\n          }\n        } catch (err) {\n          _didIteratorError12 = true;\n          _iteratorError12 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion12 && _iterator12.return != null) {\n              _iterator12.return();\n            }\n          } finally {\n            if (_didIteratorError12) {\n              throw _iteratorError12;\n            }\n          }\n        }\n\n        this.initSearch();\n        this.initPagination();\n        this.initSort();\n        this.initBody(true);\n      }\n    }, {\n      key: \"initHiddenRows\",\n      value: function initHiddenRows() {\n        this.hiddenRows = [];\n      }\n    }, {\n      key: \"showRow\",\n      value: function showRow(params) {\n        this.toggleRow(params, true);\n      }\n    }, {\n      key: \"hideRow\",\n      value: function hideRow(params) {\n        this.toggleRow(params, false);\n      }\n    }, {\n      key: \"toggleRow\",\n      value: function toggleRow(params, visible) {\n        var row;\n\n        if (params.hasOwnProperty('index')) {\n          row = this.getData()[params.index];\n        } else if (params.hasOwnProperty('uniqueId')) {\n          row = this.getRowByUniqueId(params.uniqueId);\n        }\n\n        if (!row) {\n          return;\n        }\n\n        var index = Utils.findIndex(this.hiddenRows, row);\n\n        if (!visible && index === -1) {\n          this.hiddenRows.push(row);\n        } else if (visible && index > -1) {\n          this.hiddenRows.splice(index, 1);\n        }\n\n        this.initBody(true);\n      }\n    }, {\n      key: \"getHiddenRows\",\n      value: function getHiddenRows(show) {\n        if (show) {\n          this.initHiddenRows();\n          this.initBody(true);\n          return;\n        }\n\n        var data = this.getData();\n        var rows = [];\n        var _iteratorNormalCompletion13 = true;\n        var _didIteratorError13 = false;\n        var _iteratorError13 = undefined;\n\n        try {\n          for (var _iterator13 = data[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n            var row = _step13.value;\n\n            if (this.hiddenRows.includes(row)) {\n              rows.push(row);\n            }\n          }\n        } catch (err) {\n          _didIteratorError13 = true;\n          _iteratorError13 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion13 && _iterator13.return != null) {\n              _iterator13.return();\n            }\n          } finally {\n            if (_didIteratorError13) {\n              throw _iteratorError13;\n            }\n          }\n        }\n\n        this.hiddenRows = rows;\n        return rows;\n      }\n    }, {\n      key: \"mergeCells\",\n      value: function mergeCells(options) {\n        var row = options.index;\n        var col = this.getVisibleFields().indexOf(options.field);\n        var rowspan = options.rowspan || 1;\n        var colspan = options.colspan || 1;\n        var i;\n        var j;\n        var $tr = this.$body.find('>tr');\n\n        if (this.options.detailView && !this.options.cardView) {\n          col += 1;\n        }\n\n        var $td = $tr.eq(row).find('>td').eq(col);\n\n        if (row < 0 || col < 0 || row >= this.data.length) {\n          return;\n        }\n\n        for (i = row; i < row + rowspan; i++) {\n          for (j = col; j < col + colspan; j++) {\n            $tr.eq(i).find('>td').eq(j).hide();\n          }\n        }\n\n        $td.attr('rowspan', rowspan).attr('colspan', colspan).show();\n      }\n    }, {\n      key: \"updateCell\",\n      value: function updateCell(params) {\n        if (!params.hasOwnProperty('index') || !params.hasOwnProperty('field') || !params.hasOwnProperty('value')) {\n          return;\n        }\n\n        this.data[params.index][params.field] = params.value;\n\n        if (params.reinit === false) {\n          return;\n        }\n\n        this.initSort();\n        this.initBody(true);\n      }\n    }, {\n      key: \"updateCellById\",\n      value: function updateCellById(params) {\n        var _this16 = this;\n\n        if (!params.hasOwnProperty('id') || !params.hasOwnProperty('field') || !params.hasOwnProperty('value')) {\n          return;\n        }\n\n        var allParams = Array.isArray(params) ? params : [params];\n        allParams.forEach(function (_ref31) {\n          var id = _ref31.id,\n              field = _ref31.field,\n              value = _ref31.value;\n\n          var rowId = _this16.options.data.indexOf(_this16.getRowByUniqueId(id));\n\n          if (rowId === -1) {\n            return;\n          }\n\n          _this16.data[rowId][field] = value;\n        });\n\n        if (params.reinit === false) {\n          return;\n        }\n\n        this.initSort();\n        this.initBody(true);\n      }\n    }, {\n      key: \"getOptions\",\n      value: function getOptions() {\n        // deep copy and remove data\n        var options = JSON.parse(JSON.stringify(this.options));\n        delete options.data;\n        return options;\n      }\n    }, {\n      key: \"getSelections\",\n      value: function getSelections() {\n        var _this17 = this;\n\n        // fix #2424: from html with checkbox\n        return this.options.data.filter(function (row) {\n          return row[_this17.header.stateField] === true;\n        });\n      }\n    }, {\n      key: \"getAllSelections\",\n      value: function getAllSelections() {\n        var _this18 = this;\n\n        return this.options.data.filter(function (row) {\n          return row[_this18.header.stateField];\n        });\n      }\n    }, {\n      key: \"checkAll\",\n      value: function checkAll() {\n        this.checkAll_(true);\n      }\n    }, {\n      key: \"uncheckAll\",\n      value: function uncheckAll() {\n        this.checkAll_(false);\n      }\n    }, {\n      key: \"checkInvert\",\n      value: function checkInvert() {\n        var $items = this.$selectItem.filter(':enabled');\n        var checked = $items.filter(':checked');\n        $items.each(function (i, el) {\n          $(el).prop('checked', !$(el).prop('checked'));\n        });\n        this.updateRows();\n        this.updateSelected();\n        this.trigger('uncheck-some', checked);\n        checked = this.getSelections();\n        this.trigger('check-some', checked);\n      }\n    }, {\n      key: \"checkAll_\",\n      value: function checkAll_(checked) {\n        var rows;\n\n        if (!checked) {\n          rows = this.getSelections();\n        }\n\n        this.$selectAll.add(this.$selectAll_).prop('checked', checked);\n        this.$selectItem.filter(':enabled').prop('checked', checked);\n        this.updateRows();\n\n        if (checked) {\n          rows = this.getSelections();\n        }\n\n        this.trigger(checked ? 'check-all' : 'uncheck-all', rows);\n      }\n    }, {\n      key: \"check\",\n      value: function check(index) {\n        this.check_(true, index);\n      }\n    }, {\n      key: \"uncheck\",\n      value: function uncheck(index) {\n        this.check_(false, index);\n      }\n    }, {\n      key: \"check_\",\n      value: function check_(checked, index) {\n        var $el = this.$selectItem.filter(\"[data-index=\\\"\".concat(index, \"\\\"]\"));\n        var row = this.data[index];\n\n        if ($el.is(':radio') || this.options.singleSelect) {\n          var _iteratorNormalCompletion14 = true;\n          var _didIteratorError14 = false;\n          var _iteratorError14 = undefined;\n\n          try {\n            for (var _iterator14 = this.options.data[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n              var r = _step14.value;\n              r[this.header.stateField] = false;\n            }\n          } catch (err) {\n            _didIteratorError14 = true;\n            _iteratorError14 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion14 && _iterator14.return != null) {\n                _iterator14.return();\n              }\n            } finally {\n              if (_didIteratorError14) {\n                throw _iteratorError14;\n              }\n            }\n          }\n\n          this.$selectItem.filter(':checked').not($el).prop('checked', false);\n        }\n\n        row[this.header.stateField] = checked;\n        $el.prop('checked', checked);\n        this.updateSelected();\n        this.trigger(checked ? 'check' : 'uncheck', this.data[index], $el);\n      }\n    }, {\n      key: \"checkBy\",\n      value: function checkBy(obj) {\n        this.checkBy_(true, obj);\n      }\n    }, {\n      key: \"uncheckBy\",\n      value: function uncheckBy(obj) {\n        this.checkBy_(false, obj);\n      }\n    }, {\n      key: \"checkBy_\",\n      value: function checkBy_(checked, obj) {\n        var _this19 = this;\n\n        if (!obj.hasOwnProperty('field') || !obj.hasOwnProperty('values')) {\n          return;\n        }\n\n        var rows = [];\n        this.options.data.forEach(function (row, i) {\n          if (!row.hasOwnProperty(obj.field)) {\n            return false;\n          }\n\n          if (obj.values.includes(row[obj.field])) {\n            var $el = _this19.$selectItem.filter(':enabled').filter(Utils.sprintf('[data-index=\"%s\"]', i)).prop('checked', checked);\n\n            row[_this19.header.stateField] = checked;\n            rows.push(row);\n\n            _this19.trigger(checked ? 'check' : 'uncheck', row, $el);\n          }\n        });\n        this.updateSelected();\n        this.trigger(checked ? 'check-some' : 'uncheck-some', rows);\n      }\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        this.$el.insertBefore(this.$container);\n        $(this.options.toolbar).insertBefore(this.$el);\n        this.$container.next().remove();\n        this.$container.remove();\n        this.$el.html(this.$el_.html()).css('margin-top', '0').attr('class', this.$el_.attr('class') || ''); // reset the class\n      }\n    }, {\n      key: \"showLoading\",\n      value: function showLoading() {\n        this.$tableLoading.css('display', 'flex');\n      }\n    }, {\n      key: \"hideLoading\",\n      value: function hideLoading() {\n        this.$tableLoading.css('display', 'none');\n      }\n    }, {\n      key: \"togglePagination\",\n      value: function togglePagination() {\n        this.options.pagination = !this.options.pagination;\n        this.$toolbar.find('button[name=\"paginationSwitch\"]').html(Utils.sprintf(this.constants.html.icon, this.options.iconsPrefix, this.options.pagination ? this.options.icons.paginationSwitchDown : this.options.icons.paginationSwitchUp));\n        this.updatePagination();\n      }\n    }, {\n      key: \"toggleFullscreen\",\n      value: function toggleFullscreen() {\n        this.$el.closest('.bootstrap-table').toggleClass('fullscreen');\n        this.resetView();\n      }\n    }, {\n      key: \"refresh\",\n      value: function refresh(params) {\n        if (params && params.url) {\n          this.options.url = params.url;\n        }\n\n        if (params && params.pageNumber) {\n          this.options.pageNumber = params.pageNumber;\n        }\n\n        if (params && params.pageSize) {\n          this.options.pageSize = params.pageSize;\n        }\n\n        this.trigger('refresh', this.initServer(params && params.silent, params && params.query, params && params.url));\n      }\n    }, {\n      key: \"resetWidth\",\n      value: function resetWidth() {\n        if (this.options.showHeader && this.options.height) {\n          this.fitHeader();\n        }\n\n        if (this.options.showFooter && !this.options.cardView) {\n          this.fitFooter();\n        }\n      }\n    }, {\n      key: \"showColumn\",\n      value: function showColumn(field) {\n        this.toggleColumn(this.fieldsColumnsIndex[field], true, true);\n      }\n    }, {\n      key: \"hideColumn\",\n      value: function hideColumn(field) {\n        this.toggleColumn(this.fieldsColumnsIndex[field], false, true);\n      }\n    }, {\n      key: \"getHiddenColumns\",\n      value: function getHiddenColumns() {\n        return this.columns.filter(function (_ref32) {\n          var visible = _ref32.visible;\n          return !visible;\n        });\n      }\n    }, {\n      key: \"getVisibleColumns\",\n      value: function getVisibleColumns() {\n        return this.columns.filter(function (_ref33) {\n          var visible = _ref33.visible;\n          return visible;\n        });\n      }\n    }, {\n      key: \"toggleAllColumns\",\n      value: function toggleAllColumns(visible) {\n        var _iteratorNormalCompletion15 = true;\n        var _didIteratorError15 = false;\n        var _iteratorError15 = undefined;\n\n        try {\n          for (var _iterator15 = this.columns[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n            var column = _step15.value;\n            column.visible = visible;\n          }\n        } catch (err) {\n          _didIteratorError15 = true;\n          _iteratorError15 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion15 && _iterator15.return != null) {\n              _iterator15.return();\n            }\n          } finally {\n            if (_didIteratorError15) {\n              throw _iteratorError15;\n            }\n          }\n        }\n\n        this.initHeader();\n        this.initSearch();\n        this.initPagination();\n        this.initBody();\n\n        if (this.options.showColumns) {\n          var $items = this.$toolbar.find('.keep-open input').prop('disabled', false);\n\n          if ($items.filter(':checked').length <= this.options.minimumCountColumns) {\n            $items.filter(':checked').prop('disabled', true);\n          }\n        }\n      }\n    }, {\n      key: \"showAllColumns\",\n      value: function showAllColumns() {\n        this.toggleAllColumns(true);\n      }\n    }, {\n      key: \"hideAllColumns\",\n      value: function hideAllColumns() {\n        this.toggleAllColumns(false);\n      }\n    }, {\n      key: \"filterBy\",\n      value: function filterBy(columns) {\n        this.filterColumns = Utils.isEmptyObject(columns) ? {} : columns;\n        this.options.pageNumber = 1;\n        this.initSearch();\n        this.updatePagination();\n      }\n    }, {\n      key: \"scrollTo\",\n      value: function scrollTo(_value) {\n        if (typeof _value === 'undefined') {\n          return this.$tableBody.scrollTop();\n        }\n\n        var value = _value;\n\n        if (typeof _value === 'string' && _value === 'bottom') {\n          value = this.$tableBody[0].scrollHeight;\n        }\n\n        this.$tableBody.scrollTop(value);\n      }\n    }, {\n      key: \"getScrollPosition\",\n      value: function getScrollPosition() {\n        return this.scrollTo();\n      }\n    }, {\n      key: \"selectPage\",\n      value: function selectPage(page) {\n        if (page > 0 && page <= this.options.totalPages) {\n          this.options.pageNumber = page;\n          this.updatePagination();\n        }\n      }\n    }, {\n      key: \"prevPage\",\n      value: function prevPage() {\n        if (this.options.pageNumber > 1) {\n          this.options.pageNumber--;\n          this.updatePagination();\n        }\n      }\n    }, {\n      key: \"nextPage\",\n      value: function nextPage() {\n        if (this.options.pageNumber < this.options.totalPages) {\n          this.options.pageNumber++;\n          this.updatePagination();\n        }\n      }\n    }, {\n      key: \"toggleView\",\n      value: function toggleView() {\n        this.options.cardView = !this.options.cardView;\n        this.initHeader(); // Fixed remove toolbar when click cardView button.\n        // this.initToolbar();\n\n        this.$toolbar.find('button[name=\"toggle\"]').html(Utils.sprintf(this.constants.html.icon, this.options.iconsPrefix, this.options.cardView ? this.options.icons.toggleOn : this.options.icons.toggleOff));\n        this.initBody();\n        this.trigger('toggle', this.options.cardView);\n      }\n    }, {\n      key: \"refreshOptions\",\n      value: function refreshOptions(options) {\n        // If the objects are equivalent then avoid the call of destroy / init methods\n        if (Utils.compareObjects(this.options, options, true)) {\n          return;\n        }\n\n        this.options = $.extend(this.options, options);\n        this.trigger('refresh-options', this.options);\n        this.destroy();\n        this.init();\n      }\n    }, {\n      key: \"resetSearch\",\n      value: function resetSearch(text) {\n        var $search = this.$toolbar.find('.search input');\n        $search.val(text || '');\n        this.onSearch({\n          currentTarget: $search\n        });\n      }\n    }, {\n      key: \"expandRow_\",\n      value: function expandRow_(expand, index) {\n        var $tr = this.$body.find(Utils.sprintf('> tr[data-index=\"%s\"]', index));\n\n        if ($tr.next().is('tr.detail-view') === !expand) {\n          $tr.find('> td > .detail-icon').click();\n        }\n      }\n    }, {\n      key: \"expandRow\",\n      value: function expandRow(index) {\n        this.expandRow_(true, index);\n      }\n    }, {\n      key: \"collapseRow\",\n      value: function collapseRow(index) {\n        this.expandRow_(false, index);\n      }\n    }, {\n      key: \"expandAllRows\",\n      value: function expandAllRows(isSubTable) {\n        var _this20 = this;\n\n        if (isSubTable) {\n          var $tr = this.$body.find(Utils.sprintf('> tr[data-index=\"%s\"]', 0));\n          var detailIcon = null;\n          var executeInterval = false;\n          var idInterval = -1;\n\n          if (!$tr.next().is('tr.detail-view')) {\n            $tr.find('> td > .detail-icon').click();\n            executeInterval = true;\n          } else if (!$tr.next().next().is('tr.detail-view')) {\n            $tr.next().find('.detail-icon').click();\n            executeInterval = true;\n          }\n\n          if (executeInterval) {\n            try {\n              idInterval = setInterval(function () {\n                detailIcon = _this20.$body.find('tr.detail-view').last().find('.detail-icon');\n\n                if (detailIcon.length > 0) {\n                  detailIcon.click();\n                } else {\n                  clearInterval(idInterval);\n                }\n              }, 1);\n            } catch (ex) {\n              clearInterval(idInterval);\n            }\n          }\n        } else {\n          var trs = this.$body.children();\n\n          for (var i = 0; i < trs.length; i++) {\n            this.expandRow_(true, $(trs[i]).data('index'));\n          }\n        }\n      }\n    }, {\n      key: \"collapseAllRows\",\n      value: function collapseAllRows(isSubTable) {\n        if (isSubTable) {\n          this.expandRow_(false, 0);\n        } else {\n          var trs = this.$body.children();\n\n          for (var i = 0; i < trs.length; i++) {\n            this.expandRow_(false, $(trs[i]).data('index'));\n          }\n        }\n      }\n    }, {\n      key: \"updateFormatText\",\n      value: function updateFormatText(name, text) {\n        if (this.options[Utils.sprintf('format%s', name)]) {\n          if (typeof text === 'string') {\n            this.options[Utils.sprintf('format%s', name)] = function () {\n              return text;\n            };\n          } else if (typeof text === 'function') {\n            this.options[Utils.sprintf('format%s', name)] = text;\n          }\n        }\n\n        this.initToolbar();\n        this.initPagination();\n        this.initBody();\n      }\n    }]);\n\n    return BootstrapTable;\n  }();\n\n  BootstrapTable.DEFAULTS = DEFAULTS;\n  BootstrapTable.LOCALES = LOCALES;\n  BootstrapTable.COLUMN_DEFAULTS = COLUMN_DEFAULTS;\n  BootstrapTable.EVENTS = EVENTS; // BOOTSTRAP TABLE PLUGIN DEFINITION\n  // =======================\n\n  var allowedMethods = ['getOptions', 'getSelections', 'getAllSelections', 'getData', 'load', 'append', 'prepend', 'remove', 'removeAll', 'insertRow', 'updateRow', 'updateCell', 'updateByUniqueId', 'removeByUniqueId', 'getRowByUniqueId', 'showRow', 'hideRow', 'getHiddenRows', 'mergeCells', 'refreshColumnTitle', 'checkAll', 'uncheckAll', 'checkInvert', 'check', 'uncheck', 'checkBy', 'uncheckBy', 'refresh', 'resetView', 'resetWidth', 'destroy', 'showLoading', 'hideLoading', 'showColumn', 'hideColumn', 'getHiddenColumns', 'getVisibleColumns', 'showAllColumns', 'hideAllColumns', 'filterBy', 'scrollTo', 'getScrollPosition', 'selectPage', 'prevPage', 'nextPage', 'togglePagination', 'toggleView', 'refreshOptions', 'resetSearch', 'expandRow', 'collapseRow', 'expandAllRows', 'collapseAllRows', 'updateFormatText', 'updateCellById'];\n  $.BootstrapTable = BootstrapTable;\n\n  $.fn.bootstrapTable = function (option) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key5 = 1; _key5 < _len3; _key5++) {\n      args[_key5 - 1] = arguments[_key5];\n    }\n\n    var value;\n    this.each(function (i, el) {\n      var data = $(el).data('bootstrap.table');\n      var options = $.extend({}, BootstrapTable.DEFAULTS, $(el).data(), _typeof(option) === 'object' && option);\n\n      if (typeof option === 'string') {\n        var _data2;\n\n        if (!allowedMethods.includes(option)) {\n          throw new Error(\"Unknown method: \".concat(option));\n        }\n\n        if (!data) {\n          return;\n        }\n\n        value = (_data2 = data)[option].apply(_data2, args);\n\n        if (option === 'destroy') {\n          $(el).removeData('bootstrap.table');\n        }\n      }\n\n      if (!data) {\n        $(el).data('bootstrap.table', data = new $.BootstrapTable(el, options));\n      }\n    });\n    return typeof value === 'undefined' ? this : value;\n  };\n\n  $.fn.bootstrapTable.Constructor = BootstrapTable;\n  $.fn.bootstrapTable.defaults = BootstrapTable.DEFAULTS;\n  $.fn.bootstrapTable.columnDefaults = BootstrapTable.COLUMN_DEFAULTS;\n  $.fn.bootstrapTable.locales = BootstrapTable.LOCALES;\n  $.fn.bootstrapTable.methods = allowedMethods;\n  $.fn.bootstrapTable.utils = Utils; // BOOTSTRAP TABLE INIT\n  // =======================\n\n  $(function () {\n    $('[data-toggle=\"table\"]').bootstrapTable();\n  });\n})(jQuery);\n\n//# sourceURL=webpack:///./node_modules/bootstrap-table/src/bootstrap-table.js?");

/***/ })

/******/ });
});;